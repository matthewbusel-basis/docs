## Meeting
Calendar Event Title: Mitch <> Matthew
Calendar Event Time: 2025-09-15T15:00:00-04:00
Meeting Note Title:Mitch <> Matthew
Attendees: Mitchell Troyanovsky
Link: https://notes.granola.ai/d/66b4144a-5067-4319-b559-7b5e794ca393

## Transcript
 
Me: All right. The coding thing, by the way, is sick. I still don't. Let's figure this out. For a section. Love it. Because I want to. So something is wrong with the codex thing. I don't know what it is. I suspect it might be that it only reviews if you set up Codex, because it's definitely not reviewing on every pr. I've seen a review on some pr, but I don't think it's reviewing at every pr, and I'm trying to figure out what the problem is. I think it's because we just go to these PRs, like Codex here. Like, I don't think so. Where the fuck. Oh, this is a draft period. That's why. So, Claude, codes here. What the fuck is codex? I don't really understand. But it definitely has done some right. So I kind of think maybe I should make everyone. Set it up. I think that could be it. Everyone needs a link. They're GitHub. I bet you that's what it is. That's the original. Because if I go to here. Go to settings. Codex settings code review. So this is on. They even have it on for Atlas. We'd actually test this. We could turn it off. Right this way. But it might be that it's on. But only for me. As a resign or other people who have codex. I don't think. Settings or you've got it. Since you make this environment. Yeah, I could turn it off, or I guess you could do it. Turn it off and do it. Let's just assume. I think. I suspect it is. It is like people need to. Just. Yeah. Let me just ping follow an inch to do that. I suspect that's what it is. Okay? I've said that. Let's go. Just wall in here. Opening. I just launched some improvements to Codex today. And in general, Codex can do code reviews. I'm seeing that it's reviewing some PRs but not others. I have this as small suspicion that it only reviews PRs for people who have a link to their GitHub in Codex. Is that true or can I turn it on? Myself for all the PRs in a repo? Or does every person who's making PRs in that repo need to go and turn it on? So how does that work? Can you go and figure that out? Okay? All right. Next. We are doing GitHub actions. Okay, first, let's do. Let's fix the Atlas one. Okay? Nice. First off. I'm getting rid of a lot of these, actually. So essentially here nodes opened means like okay, on open and then synchronize is like on any new commit in that. You could imagine wanting something different from, like, the first time you do it versus, like, new commits. They're kind of small. Yeah, makes sense. But here, I think it's fine. I used to have them as two separate things. Just the same thing on both right now. Right now, it's a safe compose. And then in theory, this thing. I don't know if this works, but in theory, this is like. I think this is kind of dumb. It's, like, meant to be, like, oh, this is, like, similar to this, but if you add Claude, what does it do? You can add claw to do stuff on the PR that's different than this. It's in the same file, but it's technically a different, like, job. Oh, interesting. Okay, I think. Pure review and quality response. Right. Okay, so one thing I'll do with quickly. I'm just going to clean even an Arnold before we even move to Atlas. So let's do H cleanup quad. Okay, so I'm going to clean up the links here where I had these old ones. I'm just going to remove these. So I believe this one's old. Let's just get rid of this. Boom. This one I still like. Conceptually, we don't actually. I don't actually use this moment. So the idea with this one, I have it turned off. I think. Yeah, I have it turned off right now. I forget how I do that. I think it doesn't have a type. Somehow this is. We could ask the thing. But anyway, the idea here is to like per pr. You create like. Imagine you have a few QA people. Let's say the pr. How do they know what's most likely to break from this pr? It'd be cool if you had an agent who would, like, look at the PR and be like, hey, here are the high blast radius areas, right? And so, because of Clockwood, you can do anything. That was with idea. That was like the brigade's like a testing plan per pr, but it was a little noisy and as long as you leave it for now. But I don't think it's not actually working. I understand. I'm pretty sure theoretically good. Not working at. Yeah. I believe that this action is not working at the moment. Can you explain why it's not working? It's purposefully not on. But what is it about the git of action that makes it not on? That's just for learning. Purposes. Okay? This is good. This is like a way to update. This as well, I believe. And I already use this V1. At least that's good. I believe it needs to do. Fetch depth one. Not zero. I don't fully understand that, but my understanding is zero. You get the full history. Of commits in that area. So it's, like, pretty noisy. One is, like, you just get the most, like, just. Just the most recent change. And so you can imagine if you like a really good agent and you want it to, like, be, like, really thoughtful, you'd see, like, the full history of changes. To, like, be like, oh, it used to. Be this. Then you change the and now you're changing to this. That's just one restricts it to just that. Understood? So far. Okay, why is this only triggers? On like new, which is like types. Like, you need to type. So the reason. Oh, the reason is because like, you see here, pull request types. This one doesn't have pull request types, so it's not gonna. It's only gonna happen if I make an issue with a specific type. Which you're never making, so that's why it's not working at the moment. Okay, so retrieve prompts. This actually does currently work. Which is good. This is like. If I'm updating, this is like a specifically for the workspace. If I'm updating retrieve context, I want to make sure that people are properly updated. This almost like similar app that's actually where it's like you're updating the context. With these guidelines. Nice. So that is, I believe, currently works. Cloud review on demand. This is, like, old. But I don't know what this is. This is like the old one. Let's get rid of this. Let me just confirm the 1v1 is 1. Cloud care review. This is the most recent. Yes. Cool. Yeah. So the slash review means something in cloud code. It, like, does something under the hood. Let's get rid of this. Old. System prop review. This footworks. So let's leave this. Let me just double check that that works properly. Add clod pr review. Is currently correctly formatted with the new claud code V1. The first part about the pull request. Can you take a look at the following two files and see if they're also correctly formatted using the first one? As the base. Okay? Let's get rid of. All right. While that's happening. So that seems for pretty good. Let's go. To. Okay, so we have. Oh, yeah, we have GitHub, review, internal, external record. Okay? Cool. Can you update both of these two files to use the new cloud code V1? I'm gonna give you below the example syntax of how to do this. Make sure the prompt includes review in the beginning. And then otherwise keep the instructions. From before. And update other parts as well. Including the fetch depth, etc. New. Code. Files to update. Power internal. External. That's stupid. Should be one. The only reason I know it should be one is that if you go to the Claude. Code example. This is the one. Okay? Great. Now, what's cool, by the way, is that these things are right to the PRs. Right? It's not just like reviews like they could do writes. They can actually make changes if you give it access to. That's what this one would be like adding to documentation. Tank, right? Like you can give it the ability to commit in documentation, updates. Nice, which is quite. Okay, so that was wrong. It's fine. Leave it. Prompt. How can I see who has signed up for. Good question. I don't think that's true. How do you see, like, the reviews that are happening? Yeah. I mean, I see every run of it, essentially. You think you do or no? I don't know. It'd be nice to every run. Yeah. I'm kind of amazed. Why you can't do that. It's really dumb. Oh, do I need to connect it to Essex Labs? Configure. Okay. Wait a second. This right now. Material in the eye should never do it. I'm just. I'm just curious. What if it looks the same for me, too? Well, you're probably not adding up to six laps. I'm right. I'm not. Yeah. I'm connected to my personal as well. Here, whatever it is. It is. It is connected. That's why I can go to the repositories. So why are we asking you to figure. Whatever. Okay, whatever. I don't understand. Here's the thing. Like, do it every time. Seems kind of dumb. I want it on every to trigger or you a hair. So I have to specifically write. Let's see what it says. Okay? All right, so let's see. I just. I just. Ping. Opening eye. Let's see what they tell me. If worst case, we can just have, like, an automatic message that says fucking dumb. Okay? Automation. Remember, everyone with a wing chung D Count on that Repo. There we go. Solve it, I think. Oh, there we go. You do need to link your GitHub. Everyone has to do that, okay? Yes. Great. How do I see who is linked it? I'm just. I'm thinking of, like, the future version of this, where we discover this. This is now part of onboarding. We mentioned this during our meeting. It gets granolaed and it gets automatically added to, like, our onboarding steps, right? 100%. Okay? I'll see you in 30. No worries. All Huffle stuff we go through. We got some examples of AP aging summaries that don't specifically list the AS update. But that's sort of okay because it's imply that it's for that period. So I'll give you the reasoning that was provided by the agent that was powered by this prompt. Can you try to update this prompt to make it okay if there is no date? But do it in a way that 's really cohesive and seamless. With the way it's currently done. Rather than putting a band aid over the top of it. All right. Back out of. First off. No, I don't want an exception to the azte. I want to change the instructions generally to not require an AS update. But if there's no AS update, it needs to explain and caveat in the explanation. For the reconciliation generally. So we were looking at. Okay? So we went and had to change how to update. From yeah, to V1. Actually, before I do that. Let me just. Get my current situation. Okay? Cool. Okay? So I don't know if either of these are good. And look for the first fans, so I'm just going to do it. Let's just keep them all both for now. I could check it. Later. And then the key here is now let me go make a change to internal. And we can change the external. It should try to run when I make the pr. It actually doesn't technically work. Actually, it doesn't matter. Let's just imagine it. Because technically the way it works, you can't actually test the action. If we were authenticating with GitHub, not with anthropics thing, then you can test the action in the same pr, but otherwise you can't. You'll see in the same. Yeah, do have to check it in first and then do another test. Yeah. So you need to. See? Us. You should be able to do it without me. But. We added this. We added, like, That. Okay? We have to fix that. You're supposed to not have to have that requirement. For me personally, I could do this. Okay, cool. I can do that. But, yeah, I got you. All right. Want me to merge it? Yes, please. Okay? Okay, so. Yeah. If you said we go here to checks. You'll see. Where you're okay. So now let's try. Now if I go. Oh, these are zero. Fuck me. Why does it keep one? It's so interesting. Wants to go back to zero. Actually. There's a couple issues here. Let's see it this way. Check. It's because the model doesn't know. It thinks, it thinks, it thinks Son is the latest, so he keeps confused. It assumes size. The latest which is pretty funny. Wait. And it has an advaita. Wait. This was old. You're on. Testing collage. N. Oh, here we go. Okay? I just didn't have the latest. Release. All right. Now it's good. Checkout. Cool, all right. So now let's go update something in the internal docs. Update like this. Just do that. While it's doing this, let's review, like the way it currently does it. That'll be kind of almost in some sense, more important. Right now. What did it say? Okay, so follow. In the cursor's PR for detailed what to focus on. Okay? Then drive a Claude. Mdi don't, okay? That's fine. And then. What is that? I think I should say so. Here we have. You can have nested cursor rules. So it's not in that cursor. There's one internal or an external. Docs cursor. Pr review. This is what it says at the moment. So first, let's just. Here's what we do. Is it be like. What I want you to do is I want you to pretend. I want you to go and read. Pretend that you are the agent actually executing. In this GitHub workflow, go and follow its instructions, go to the other information, and then based on that, Come back to me with, what is your understanding of your job if you were the agent that was doing this role in this action? Let's take that off. Then this way we can go and make updates. Let's do a scene similar for Control. I'm basing this. Maybe we can update. If it's doing what you want it to do, yeah. Does it understand? What? And I actually don't even know what I wanted to do. So I just like what it is. Like, is it actually getting to that? Like, for example, is the path. Maybe the path's not even correct. Like, who knows? This is really helpful. And then I can say that GitHub action is basically, is very simple. It's just a file and GitHub workflows, and you're just working with it like it's an agent. That's funny. Do you liked it or no? Sorry. Yeah, sorry. Or that's too trillion spaces. No, I just wanted screw. So this one. So let's just see that both work, so. So there's two of them. So this one. So this one come back. This is the internal and the external. This is the internal one. And what did the external one do? Because I only see one in common. Interesting. Can it only do one? On a few minutes. Yeah. That's possible. Now. I kind of think you only want to check. I kind of think we should combine them. And then, like, it's. Like, if it's internally, go to this. Like it's smart enough. So just do both. Yeah. I got this issue when I'm trying to run any clod o'clock code. Get up action on my repo. I actually have two different cloud code options. I do two different things. Then some of those things, like one, got canceled. Can you try to figure out why that is? I'll paste you both GitHub actions below. This wouldn't be good. I kind of doubt it. Because if you can't do more than one, Then, like, how could you do the doc stuff? Where it does it and then suggest changes as a second step. Yeah. Let's see. What it says. By the way. See here it says like path, so it's only the open synchronize under external docs. And so you just add the second path. This one is internal docs. Yeah. Yeah. So. That sort of. That's sort of why. Well, if we were combining them, we were just from. Just remove the path up very nicely. Makes sense. Probably. I mean, depends on if you want. Sure. I'll be back. Let me just get back. All right, let's see what that says, and then. Very smart. See, this is. Not already do. Oh, it's a simple request number. Oh, I see. Oh, I just didn't understand. I understand. Dash internal. It's above him at the exact same group. I say. They were called pr Review this. Cancel progress truths. They were just canceling each other. Maybe she was not a case. One. Very cool. Nice. Solve that. I think this is, like, a decent spot. I think. I think that's something we're gonna decide is, like, is this way of doing it where you have, like, the cursor rule, like, prq. Like, it's kind of weird because you don't really need cursor to, like, review the. Pr. I think this should probably just be in the agents. Indeed. Just have one agent MD or like I don't let you know how the agents MD like is it? Can you explain how the Agents MD standard works? Is it just one per repo or can you have it be nested like one per folder and then how you reference it when you relate to KU exploba. Make sure to explain specifically how codecs and how cursor interact with H7D. And then. I know Claude doesn't work with it, but what are the. Workarounds to have the clock look at the agents MD and make sure to find and consult experts sources online. Okay? Cool. Guys, I think that's. In a decent state. And now. We did that now. Let's do one more change. Here. So let's do, like, open and synchronized. So we should do, like. If I change? Them. Yeah, it should be. While you're here, do you mind also just giving Zapier at Access so I can. Oh, it's closer. Well, you said some cloud codes that you needed as well. I would like to have Cloud Club. But also if you're like, hey, that's like, not as good as using codecs, then I'm happy to switch to. I'm just used to using GlideCo the last few months. I think. We can use clark. I believe the way we need to do cloud code is you just need an API key. Yeah, exactly. Exactly. Also, again, it's not. I'm happy to use Codexm trade. But I do want to get that. I'll show you where it is in GitHub. So this for the Zapier app, It just says, yes, that I can. There you go. Thanks. Added. Right. I think it just. All it gives me is request access that the organization level. But we need it for just for Atlas. Not for you. Needed for. At least I believe I could just go here. GitHub apps. Let's replace the ad. Oh, yeah, here we go. It's gonna say like I. Just do it. Does that be your give up? It seems like it's under a slightly different spot. It's under like integrations, applications. I don't know if that slightly differently get of apps. Application. Oh, that would. Yeah. Hopefully that's it. Now. It's a GitHub app. Where did you go to see it? Show you. Profile, then settings. And then integration to the publications. Authorized oauth oauths into zapier. And then there's a request. Access button. I think I just need to go. And. Start with this knowingness. No, don't worry. At all. This is like, super, super duper normal. Believe. How do I always done this? So wait, you went to, like, the. It's. I went to this. Settings like here and then settings there. Yeah. On the left of the applications at the bottom. Yeah. The problem is that this is, like, it's personal. It was authorized oauth apps. And then. Oh, no. Yeah, you have different ones. Okay. Because this is the b. This is, like, on me. Like, in some sense, it doesn't really matter. What my thing is. Yeah, it's about the org level. Understood. But how did you get to the Zapier? How did I even get this here at all? Granite Applications access. I forget. It's been a couple days. It's probably like in Zapier. Can you invite me Tuesday? Numbers. I have that team plan to do that. I need a credit card for that. You adding. So I can't add you unless I upgrade to team, and then I need a credit card for that. Oh, yeah. Cool. Let's do that. Select on, right. Members trial. Here we go. Make a card. Save trial. Cool. All right. You should be invited now. Emailed yes. I don't know if they're the best, like for every sort of automation, but they do have the most integrations. No, Zapier. I've never actually really used that video. But I've always, always heard about. We used it a ton. I mean, the best thing is they just have the most integrations. They're the only granola one, so that's why. It's cleaning. I already have a ziggery out, but I don't know. I'll tell you what Chacha. Peter said about authorizing enough. Okay? I am in. So if you go to GitHub just to see if chatgpt is right about this, It says do or and then settings. And then third party access. And then about that policy. All right, judge. Well done. Sweet. Sick. All right. Well, we're Granola's into Atlas. Yes. That's. That's sick. I'm excited about. Okay, let's do the. Let's see here. So. Already sent a pr4. Let me see if. I did. Okay? Sorry. We had to make some small updates to this. Branch. Later. Okay? All right. I'll come back to this bridge. A little bit, maybe. Something's better. Let's do so let's do one more thing. Let's add. The git of action for the comments. That we were gonna do. Yeah. Remember which one this is? So I think the idea is that in Arnold, if you post. A pr. I want it to update. Any comments that you have? Yes. Yeah. So comments and doc strings, right? Yes. Either proposed either add ones that weren't there. Really like you probably don't want it to be adding additional doc strings because people may not like where those documents are unless we have a really queen. Let's see, like where? Like, here's what I would do. I would do is, like, just. Let's just start off with like. So we have here function augmentation format. So, like, I bet you if I asked, Codex to, like, go through and be like, okay. Like, how. How wealth is this actually applied throughout the code? It's gonna be like, find so many different issues, you know? Yeah. Or different places where like. Like it's not matching. Yeah, you know. And so really, what you want? It's like you want a way to, like, spin up. That. Either. This in, like, a way that, like, reduces odds of harm. Okay, so here's what I want to do. This is just a code X, dude. Can you specify which model? You do that? Yeah. Okay? Here's what I want. So I want to make a new GitHub action. Called. Like clawed documentation. What I wanted to do is look at. The commit. And look at the funct ion documentation format. Mdc. It's in the cursor rules. And what I want you to do is I want you to look at that. And then write a GitHub. Write the kind of plot code GitHub action that leverages. That information. To add comments automatically. As a commit to to the pull request. But I want you to make this, you know, think like you're a developer. You don't want it to just, like, put a bunch of random comments somewhere. Like, it needs to be really precise. So this could be fixing comments. Really not common. It's like docstrings. You don't want to be putting comments like fixing doc strings that are already there or adding doc strings if they don't exist. In a way that is aligned with our function documentation. Format. Cursor rule. And I'm also going to give you an example. Of a cloud code. GitHub Action that is not in the repo, but that was provided to me on one that can do automatic documentation. So use that as a guide alongside the current Claude PR review. YAML file on how to do this really well. Off it goes. All right. I like that idea. That was smart. See what it does, but it should. It should work pretty well. Yeah, this is like. This is sensitive because this, like, would make commits. You know, annoying as Al if it looks fast in this case, like, we'll see. The promise that comes up with it almost certainly will need to, like, improve the props to be like, you know, do not change any code at all. You know what I mean? Like, you can only change, like, be very fucking careful. Yeah. Yes. The model of smart enough. Now, that. Like that. That should work just fine. In theory, you could add, like, you know, deterministic guardrails. It's like, oh, some sort. But I think it's probably fine. Yeah. Until it becomes a problem. Yeah. It shouldn't be a problem. But, yeah, these are like, there's this. And then so then it's like, okay, how do we go do the, like, whole common thing? Like that you and I were talking about before. I don't have time to go further into it now, but, like, we can play around with it either. I think standing up the Devin that we have to look into why they're committing to the work. I don't know if you can hit Codex as an API standard. I don't think you can. I'll check it out. And I don't think end with Claude code. I don't know how we can do that. Outside of pr, we'd have to, like, put it on a computer. Like, I don't know if there's a way to do that or not. So. Yeah, I would just, like, figure out. Okay, like, which. Which. Who are we gonna do to do that? I think Devin is fine. Like, you can. You can use Devin. Okay. You can see there are examples of, like, Kingdom Guy. So you can just hit that from. Like workflow or action. It's like trigger, right? It's cron job every day, whatever we want to do. I would say whether we need this now. Like, sure. I'm just. Just mentally. I have the mental patient. It's like cron job. It's going to look for all the most recent commits since that time. Senator Devon Yeah, let's say it's like a once a day. Once a day. Yeah. All the commits. Not just the commits, but also who did that. Their names. Okay. Because they can. Mitch have that? Yes. So who did that? Send it to Devon. Instruct Devit to be like. Look through these commits. And like, this is, this is where the prompt, this is where the prompts are important. Like, you know, look through the commits. And also look through, like, Yeah. Look through the commits. And. Look through, you know, the functionalization format number one. Make sure there's documentation as needed, you know, or something. And then two per sub rule. Like I'm sure some rules somewhere maybe Interesting problem of like, you know, you need to always understand in the code. Why the code exists. What's it? There. So pretend you're a new developer. You go through these commits. If you don't understand why this code was added, or what's the point of it? Then, you know, create, like, a question. Or something. Create a question, and then there's, like. And then this. I don't know exactly how, but then, like, it hits the slack thing, and it, like, sends a slack message. Whatever the. Whoever made the mad. Yeah. Be like, hey. And ideally, it's like very specific questions. It's not like, hey, give me more info. It's like, hey, can you explain what the purpose of this function was? Yes. And then they answer it and like, you know, adds all that up and makes a pr. Or something. Yeah, yeah. And so like the way to hack this like, like the manual way in before auto meeting it is. You could just literally go to Kodaks as we know clinic threat and just be like hey, like look at all the commitual last 24 hours. Like let's just try it. Yeah. Like, let's do. Let's do like two persons. So it'll be like, okay, this is what I want you to do. Look at all the commits. For the last 24 hours. And what I want you to do is for each commit, go and. Read particularly like a new engineer. Join the team, read through each one. And understand what was done. Make sure to look at the function documentation, format, markdown file, and then. See if there are things added that just don't make sense to you if you're a new engineer looking at the code. Where there's context that was probably in the head of the person who wrote it, that that isn't at all explained in the code. And I want you to. Only there's that kind of information generate very specific questions. For the authors of each commit. And then I want you to do is I want you to then group those questions by author so each author, even if the author had multiple commits, Should have a list of questions. From you asking why something was put in or what the purpose was or why this was removed or why this was changed or whatever it was. So that, you know, for a new engineer was joining, it was looking at the code. They would have a good understanding of how the code works and why. Beyond just reading the code, right? Like, assuming the new engineer in this case, you know, can read all the code really fast and understand it. It's more. The goal here really is to understand context that is not in the code, that was in the head of the person making it while they were writing the code. So really think about it that way. Something like that. Now, this is always, like, way down. You know, conceptually. And then also, like, probably, like, proposed, like. Also, just if there is areas where there is not documentation for the function document condition format, can you propose documentation there. Cool. Y'all ready? Stuff here is wrong. This is not right. You shouldn't be doing this. Get up, Token. I'm, like, 90% sure. This looks more correct. So I have multiple versions. Fresh type 0. I don't why the fuck it wants so bad. Why is it only. Python. Oh, I guess because this is for Python. Specifically. It's kind of interesting. Probably should be fun, too. I guess this is specifically fun. What's our. What's our function? Accreditation? For the. I guess it's in here. General rules. Yeah, it's probably. This one's probably not bad. Better starting point. I think you can make this and they can, like, top coat. Exchange it, or you can just tell it in here. Exchange it. Yeah. Or you can just pull the branch in to uch and go from there, yeah. 