## Meeting
Calendar Event Title: How to talk to customers doc
Calendar Event Time: 2025-09-18T14:45:00-04:00
Meeting Note Title:How to talk to customers doc
Attendees: Luke Bradley
Link: https://notes.granola.ai/d/101d835c-dce2-494b-9f6e-fb4a94e27b09

## Transcript
 
Me: All right? I'm hooked up. All right. Okay. So let me back up, and then we can get to what I think would be useful. So the problem that you mentioned, that Andrew mentioned, that Nikhil has mentioned, that Matt has mentioned, so I've been hearing a lot, is like, we're not talking to customers. In a consistent way. Now, I think we can try to, like, break that problem down a bit more into, like, again. Is it customer support that we're not talking about them? We touched on it already a little bit in the last minute. Is it that we're not referencing the right docs, that we're not talking the right way? But all in all, I feel like the quick win here is let's get a starting dock into Atlas. That explains how we like to talk to customers. And then we can at least reference it and then as a second step start to people like, hey, for bigger responses. Run at the recursor and, you know, against the stock, right? But the first step is like, let's just get something there. We can iterate on. So my thought was you could maybe, like, talk out some of the problems you're seeing. Like what? What things are not good. And then maybe talk out. Like, how? If we have ideas of how we like to talk to customers, I can take that Granola, turn into a dock, throw it at you, you can edit it, and then at least that'll be live. If you have other ideas, by the way, on, like, the more general problem of how do we solve this? Like, we should talk about that too. But I just felt like this would be. A quick, quick way. Yeah, I definitely think it was the right first step, even for. Even if we were gonna do something a little more advanced at some point, like having, you know, throw it all out or cursor. It references our customer conversation rules. Exactly. First step is still to stop. We hit it. So I'll try to think. I should have just talked through the things that are. I'm put this close just to make sure we get your. Yeah, the outside thing is okay. I guess I'll start with a problem right here, which is that, you know, we've a lot of different points of contact with users. We talk to users. All the time. It's different people talking to it. We definitely have this concept of a DI Strategist who is like the implementation lead. For each of the firms, but they're not the ones doing all the communication. We also have a DI on call system. Not sure how familiar you are with that, but it's like every day there's gonna be a different person on the deployed team. That, like, is responsible for triaging issues that come in through in app chat, that come in through, you know, various alerts we get. And so for that day, that person is like the external face of basis to anyone that messages us. And just to make sure, I'm gonna repeat some step back to understand, like, each firm has one person that is deemed the DI strategist lead or whatever. Yes. And they're usually the one that the firm is interfacing with. It depends. So the first part is true. So there is one person who was like, the main point of contact for all of the firms we work with. And that's gonna be presale and post sale. Like, presale right now is just George, but it will be like someone in the sales team. Matt. But after that, once we start the pilot, it's gonna be someone on the deployed intelligence team will be like the point of contact. These singular, like buck stops with them. Kind of person for this. Depending on how the communication channels are set up with each of these firms. It actually will vary whether that person's doing all the communication. Or if it's just going to be whoever's, like, on call. So, for instance. There are some firms who we've told have basically just used like the in app chat features. That all gets sent to us via pylon into Slack. We get notified and whoever is essentially on call will do the responding. So they will respond to their own voice with sort of their understanding of the product. To those users. I guess. Notes. Here, I'll just kind of dump these out. If it's someone that's more senior. We tend to have a policy of kind of like vips. We haven't done this really formally yet, but generally, if someone's senior at a firm, We will not just have it be the lead that's talking to them or not just have the on call person talking to them but actually have to like DI lead who is responsible for that firm, either one talking to them. So let me just say that about. Basically, it's an informal process. The informal process is if it's a senior person at the firm. They're, like, important to the account. Yes. Then the on call's job is to route request to their DI specialist. Yes. Yes. But if it's a more junior person or just like one of the accountants or whatever, then the person responds directly. Exactly. Exactly. So that's how it works from like the on call process and just things that come in through the pylon supported channels, which is maybe a whole different conversation of what is pylon supported, what's not. From my understanding, there is. In theory, everything should be through pylon. In practice, we have a handful of folks. That were like pre pile on. We have slack connect with. That doesn't hook up the file line, we could probably get the slack. Connect working. The big thing that I experienced a lot is like, WIS is one of our firms, huge one. They don't really use pilot supported channels. They either DM me on an external team site. Or they use this, like, feedback button that we only have for them, which is like, a slightly different thing for me. In app chat, before you had pylon, you had this feedback button. Is that what happened there? Basically. Basically. It's kind of a weird process. Not with getting to us. Or there are other people that have the only one that has this feedback button that we can't, like, we can't respond to them via this feedback button. It's only wis. We had it for everyone for a while. We took it off, but with like, it's part of their ingrained workflow, so we don't want to mess it up. But as a result, The DI on call person can't respond back to these WHIS users. It has to be like me. Cause I'm the only one that is, like, on their. One of the main people that is on their team site that does their responses to them. And it's. They have basically, like, you're outside of Slack. There's like a team that. Is their team, like, connected to. Yeah, exactly. Exactly. So there are some edge cases like that probably not worth getting into because we can find ways to get around that, but it's not like the main priority. Like, we're probably gonna keep supporting. However WIS wants to communicate with us, we're gonna probably let him do it. I'll just respond to them how I can. But I think the bigger problem for this is. Because of the on call process because there's gonna be increasingly new joiners to basis who needs an interface with customers. From early on, it's super important that we're speaking the same language. And that we have. Enforced communication norms. To like users who and just to say there. The problem then is the main problem, Yuhran is customer support, communication. There's, like, other ways we talk to customers in other place, but you're just, like, right now, the main problem you want to solve. Customer support. Customers. Yeah, customer support. Communication. That's like the written communication, really. Like, obviously, when you're on a call with someone, it's just gonna be much harder. Let's not get into that now. Sure. That's just like training, but it's sort of expected that you join on the deployed intelligence team. After, like, a week or two, you should be able to, like, you know, communicate over slack to a user. And help them figure out problems, right? And so any tool that we can provide folks to be able to do that well, To, like, know the right way to do it. Super bored. So I guess. And now to split that problem. Into. And maybe there's more ways to let it, but just to start. When you're, like, looking at bad communication. Someone wrote in a way that you disagree with. Or someone spoke about the company in a way that you don't like or that they're, like, telling incorrect information about the product. Like, those are. Those are good. Like, all slightly different. Yeah, there's just three good buckets. The answer is that it's probably all of them. At different times. There were definitely times when it's the first one where, like, I'm just looking at the writing itself, and I'm like, this is just confusing. Like, the language is confusing. There's, like, maybe, like, not that grammatical errors at the end of the world, but it's in such a way that it just, like, confuses the reader. They don't really clearly know what's being said. And, like, sometimes when you're explaining a technical concept, it is, like, really important to be as accurate as possible in the writing. So, like, you know, in, like, a misplaced article can actually, like, be the difference of them, like, taking an extra couple minutes to, like, read this and figure out what you're talking about. So being, like, precise and effective in your writing. Matters a lot. And that's like pretty low hanging fruit because you can just. If you just feed it into an LLM, it will catch those sort of things to you. In a way that doesn't, like, change your voice too much. So that's the first one. Right. Like we can make this or we will make the stock. Now that explains certain things or specific to basis. Yeah, well, like you said, even non specific basis, just add like, hey, just copy this, throw it into the LLM and then make it better. Is there a reason why people aren't doing that today, or do we, like. Is it just too much of a pain in the neck to like that? I think it's just like a, Like a. Like a timing issue is the reason people are. When you're on call, especially, you're just trying to. Move fast, get through a million things. You want to just be, like, giving them an answer in a timely way. You don't really want to have to be, like, Copy, paste, whatever. And obviously, I don't think. I think no one thinks they need to do that, right? Everyone's like, I know how to write. Like, I don't need to, like, throw it into an LLM. Like, if I would not throw my own writing into an LLM, I'm the one preaching this so clearly. Like, you need to force people to do that or they won't do it. If you think it's important. And, like, it should get done. Like, do you. Think other one. I do think it's important. I think it's especially important for new joiners. Yes. I think that everyone that's talking to a user externally should, and ideally the most frictionless way possible, should have an LLM read over what they're. What they're saying. Okay? And tell me if this. Because I'm in my head. The thing I'm trying to figure out, which is hard. Is like, there's. How do you solve this problem? Yeah. Which would be somewhat easy if, like, you and I were just trying to solve it. Yeah, but it's hard because it's like, how do we solve it in a way that we can, like, get buy in and get everyone to do it? Right. It's like a process that will make sense. Let me ask if you were to have this not just be like any random LLM, but now it has a prompt that we've designed and it might even includes like, here's some good examples. And here's some bad examples, right? Yeah. Do you think that would get people over the hump to go, oh, this is actually changing it in a way. Not to just, like, elemify it, but just, like, actually do it in the basis way. Does that change the calculus in your head or not? I think so. I think it would. I think. The latter two Prom Latitude buckets that we were talking about earlier, which is like, how you're talking about the product, like, how you're representing basis, and how you're talking about specific features. That's probably how you sell it to people. Right? It's not like your writing is, like, unclear. Let's, like, put it in here. But that's sort of, like, a side effect of it. And I would not want, like, again, I'm just kind of just throwing out notes here. I would not want the LLM to, like, rewrite the tone. Such that it's, like, very obvious that would matter a lot. I think it'd be a terrible look if everything was like, Yeah. Thanks so much for this. Like a dash. Yeah. We want it to be supernatural and preserve the voice of the person talking and like, these informal as possible. And like, it's like a great touch when someone is informal and clearly human. Actually, still a sidebar. One thing so I like, I used to do customer support. MLS company. Just because there's no one. And one thing that I used to do a lot is, like, use the loom. Is that two, like, informal or too like techie for the people for our customer base? It's a good question. I know a lot of. Yeah, I know. That's pretty common for a lot of folks. At least in, like, in more like PLG and, like, software world. Yeah. I don't know what accountants have to be like, what is this video? You know, I think the concern I have about Lum. I think. I think, yes, we should do it in certain cases. But we never want the accountant users to see that we can see their clients on the ui. Okay. Yeah, yeah. So if we, like, sign out into, like, go into a demo account and then show it on, like, a demo account. Yeah, we can loom that. But we don't want to like, our default view that, like, has their exact view is not. We don't want to show them that. Yeah, understood. That's a good point. I sidebar only because you mentioned that, like, personalized feeling like human and like, Lum puts a face to it. It makes definitely Yeah, I think that's a. It's a great idea. Like a very easy way to show that. To give the personal touch is something that I think people kind of informally do right now in messages where it's like, You get the message and immediately respond, like, hey, like, looking into this. And if it's someone you haven't met before, like, hey, Luke from Basis here, part of the deployed team. Like taking a look at this now. And you just send it, like, right off the bat to show human is doing this. There are eyes on it. It's, like, seen. And, like, if you introduce yourself, say your name, it goes a long way. So that's something like. That's something we could just, like, standardize into this process, right? Total. Yeah. The outcome of this is one is like we have a doc that is explaining how we write things, but it sounds like maybe there's another one and maybe this exists already. Of just like, here's our process. Like, this sounds like a lot of it's informal, but just like you said, this tool of like hey, if you get a message, respond to immediately to let them know it. Is that document anywhere? It probably is somewhere, but it's probably, like, hidden in some, like, random DI onboarding doc. Said once, like we could. We could make it more of. An established process. Yeah. Okay? Yeah. Makes sense. Yeah. So let's. Let's dive back into this, I think. Yeah, that's probably all I have on the actual writing style itself front. Like, we can. We can make it really smart. We can have some smart little, like, prompts of forever making the hell out version of this. Well, like, if you're just gonna. What would be in that prompt? Do you think of, like, how it should be. I'd probably want, like, really prompt it to not have, like. What does it sound really human? Right. So you want to avoid certain things, like never use, like, EM dashes that are, you know, never do. It's not only this comma, but it's like, you know, you want certain, like, LLM anti patterns. There's probably, like, quick things you could do to make it seem human, too, which are just, like, when you introduce yourself, don't capitalize the first letter of your name or something like that. Just as, like, a nice little. That's a good one. Yeah. I have to think more. If there are anything else that. Anything else that's top of mind we don't want, like. Yeah, we want to, like, adopt the same sort of tone, which is kind of, like, not super professional. It's professional, but, like. There's a sort of like. Like, it's casual within reason, too. Like, we're just, like, a person talking to them. We want to, like, make that clear. We don't want to make it overly, like, formal and formalized. Exactly. Sounding like you're a customer support. Yeah, exactly. So the ways we can do that are just generally language, and I guess we could prompt it that way. There's some other things that we tend to do, which is. Like, in addition to, like, hey, look me to this right when you get it. You send the response. And we could also, like. We could systematize rules for, like, linking to certain docks. If, you know, a certain thing comes up, we could have a little prompt that's like, you know, if you're talking about a module, make sure you link to the relevant page and all that kind of side and like, a certain format. Like cdoc here or something like that. What else is important? We usually end them in the same in a similar way. Like, if it's a bug, we'll, like, always have some sort of, like, relatively consistent way of apologizing. Like, if it's, like, a bug where we messed up, we'll be like, super sorry for the inconvenience here. No. This is painful. Like, yes. Xyz things are important. Yeah. So those are, I guess just. Those are like the. How we propped, like, sound human into. Right. Well, and all these things. And I think the other two buckets are like, you know, how do we get it to talk about the product in the right way? How do we talk about basis in the right way? Okay? Yeah. Just to split, that is. Yeah. About the product is the problem here. Like, the people on the team are giving either out of date or incorrect information by the product. Or is it more that just, like, they're just not explaining. There's, like, we have certain features and, like, we should. There's a standard way that we want people to explain those. We're not doing it. It's a little bit of both, and I think they're, like, kind of related. Where it's like, There are. We have a lot of features on basis. There should be. And not to say we, like, have it written right now, but, like, in theory, there should be. Like, one way we talk about each of these features, more or less. Right. And we want to make sure that, like, that is how we were talking about all these features. That should be what's in an external doc. Should be what's in the external docs. There are a lot of, like, failure modes here, and there's sort of, like, different failure modes. It's like sometimes we will use internal language that we use. Like, we have very different internal language from external language. And, like, as an aside, maybe that's something we want to look into at some point. Like, we have a lot of engineering terms that, like, do not map onto actual accounting terms, and that creates a lot of confusion. But, like, it's very common for someone to join, to hear us talking about something and then just, like, speaking that same way. And then like, it's not at all a term that uses it familiar with at all. Sometimes it means something completely different. Like, that happens kind of frequently. Like, we won't talk about, like, predictions or, like. Yeah, I could imagine a section in this dock that's like, Like common accounting terms. And, like, terms not to use. Yeah, exactly. This thing. And it says alerts on that. Yeah, exactly. We don't really want to talk about, like, bank aggregators. We don't want to talk about, like, say, like, publicity. Yeah. Jellies. Exactly. Predictions. All of these things. F I T s. These are all, like, terms that are internal basis representations that don't mean anything to accountants. And, like, sometimes people would use those terms, then we do caption decay. Like, that's not something we want to present to them. They have no idea what this means. Let's see. So that's. That's the internal term. Other times just like. Okay. There are a lot of ways to talk about features. We've complicated features. Not everyone, like. I don't know if everyone should be expected to, like, perfectly know every single feature. It's a lot like, we build a ton of features. Compound. Compound startup. And so, like, making sure that just you have some sort of, like, sanity check on anything you. You're about to send to make sure we're talking about teachers in the right way, I think is important. The way I'm thinking about this is like. Good external docs comes first. And that needs to be linked to actual changes we make in the product. So, like, that's a whole. I'm sure that's, like, most of what you're going to be spending time on the sidebar on that front side. But I'll just, just to agree with you, is that because they're so linked together in Atlas. If we make this doc of like, here's how we like to talk about things, here's what to do, not do. And also and look at external docs. In theory, it should have all the information it needs to be like you're talking about this correctly or not. Just sidebar for Zach. Oh, my gosh. External docs updating it. I think two things are kind of come to mind of things I like to do. Life. Yeah. So one is I'm called prompt. Less. That basically is an AI agent specifically for trying to keep Extreme Docks updated. So whenever you push a new feature on GitHub. It will think about it and try to propose a change. I think it can trigger stuff from Slack, too. You'd be like, hey, we're talking about this in Slack. Tell it to go up. Did our storm box. Don't know if it's any good, but we'll see. It's a great idea. And then the other one is just like, I was talking to Mitch about this. Is. My initial thought was, oh, we just need to assign someone on Di to be the person that's going to go through and clean up her docs. Mitch was like, we should actually have product. Running. This partially, but there's a bit of, like, a handoff, which product needs to own, saying, hey, there's this new feature. And we should put it to the docks. But then someone on DI needs to own. How do we translate that into talk about it? Should be someone with accounting expertise, too. Exactly. So I'm curious just on that process. I'll think about who's getting the product side. But on Diu, who might be, like, the right person for that. Yeah, it's a good question. And I sort of feel bad about volunteering. No one off their doc. It could be multiple people, but maybe the single person. I think it is really important that. I'd be happy to help people, but I'm not an accountant. So I think the feedback. I don't know the language that accountants use. And I think the most important thing when you're in between product and the end user is like, okay, how do you actually translate this into accounting terminology? Yes, exactly. I think Chris would be very good at it. I think Annette would be very good. And that would not want to do it, I would volunteer. Keith has done some like, he's good at understanding what users want, but I don't think he's like, great writer in that sense. But he uses AI in a way that's effective. Yeah, I'll keep thinking about that. It's one of the people on the accounting side. Chris is someone that pops out to me right now. Okay? Because. Yeah, I just. We need to figure out some sort of handoff of. It doesn't even have to be, like, super amazing and just like, hey, here's like, a stack of new features and someone that can handle that, but okay. So where were we? We've talked about the process. What were the problems? We talked about the central doc, I think. I guess I had one more thing, but anything else that comes to mind. No, I think that's essentially it. 's like there were, like, you know, again, there were, like, other failure modes of, like, how people talk about the product wrong. They're all essentially fixed by, like, just having really good external docs that can be referenced. Brad. Because it's like, I mentioned, like, the internal terminology that's also just, like, incorrect about how something works. That happens a lot. Like, just like, saying, like, what this feature does. Yeah, just like, oh, yeah, yeah. Work web. The big thing is workspace. That's, like, too complicated for this right now, but, like, they cannot do this. And just like giving it factfully incorrect answer. Right. Which is a very hard problem because it's not like we would expect our external doc to have enumerated, like, every single thing that we can do and can't do. It's a hard problem right there. We sort of have to, like. Especially with workspace, which is kind of like a non deterministic thing. We need to be very clear about, okay? Like workspace does this natively. Cause we have procedures that do this thing. Or like. Gray zone where, like, we definitely don't do this thing. But also. But, like. So I'm with you. That is tricky, but in theory. Anything that we would teach someone about how to reason about that we could add to our external docs. For, like, the user to be able to reason about in this, like, Right. Like, it's true. We have some, like, do some very high level principles for what we can and can't do. Which I'm not sure if you joined as we were having this meeting, but it's like we have this, like. Like the entirety of Cast sort of mapped out into a couple. I don't know, it's like 12 different, like. Yes, I saw them. The wiki. Yeah, exactly. And it's again, it's super high level, but it's like we can do some percentage of these fully right now. We can do like, some of them, like partially, and some of them, we don't do it all yet. And that's sort of how we're determining our roadmap. Cause we want to be able to get to, like, X percent coverage in cas. So, like, if in theory, you take that, then you just go, like, very granular on each of the pieces and be like, okay. Like we say, we can do transaction coding. What does that look like? And when you go deeper there. You can get some sense of what we can again do. Okay. I think it's an important thing, though. I actually want to, like, separately. I think we need to spend time really enumerating. We can do this thing. We can't do this thing. Like, how do we talk about basis? How do we tell a user that we like? For a while. Oh, you will to do soon. And we just commit to some, like, arbitrarily arbitrary date far off in the future. And then it would come and be like, oh, well, we're not doing that. That happened a lot early on. And then more recently, it's been like, oh, like the Dew6 Machina. With the workspace. We'll just, like, do everything for us, right? And that also, obviously, it's still a finite thing that can only do so much. Yeah, that's like a big benefit for Di, but also big benefit product. Yeah. Understand what it is we can. 't Can't do. Yeah, definitely. Definitely. That's a good project. Like that. Yeah. I think there are a lot of product people to be very appreciative to, like, know the bounds what we're trying to do. Totally. And, like, it helps for the roadmap. Right? Yeah. It's not just like, hey, like, we want to generally do this thing. Here. 10 specific. Ally most in terms of actually, like, making this Granola turn into something that's useful. Is if we had, like, five or 10, like, good and bad examples. From pylon. Yeah, I don't know if, like, if. If you have any of the top of your head or just, like, right now, if you went there, like, five minutes and just try to, like, find. Yeah, I'm sure I can find. I could definitely spend some time finding good ones. I could probably find bad ones too, but also just make bad ones. That one's a good too. We don't have to redact the name. Yeah, of course. Yeah, I can get good in bad examples for sure. Okay. Yeah. Awesome. That'd be great. I think. Let's get into your thought s. That's the. That's the main thing. Yeah. So next up is. I'll get some good, good bad examples. You'll turn this into some dock and then send it out to me. And I'll go through. That's exactly as soon as you send me those. So basically, I think I forgot if I showed you this, but like, this will go into adatlas. Oh, nice. And so, like, it's gonna literally go into Atlas. Yeah. You'll send me those good and bad examples. I'll feed that into cursor. I'll have it spit out a dog. I'll send it over to you. I have a meeting tomorrow morning with Nikhil. And so hopefully I can show him this and just be like, what do you think? And should we roll this out? Yeah. My understanding is that, like, and you can hear me, his Nikhil is the one that would, like, be like, top down, like, hey, we're doing this. Is that correct? Yeah. If he gives mandates that we should do. Yeah. Okay, good. Institutionalize that. We could just be like. We throw it in as part of the on call process. When you're triaging something through the app, you have to do this thing. Right? And I'll say, maybe just like my this is. I don't know, this will ever happen. But, like, a couple months from now, what I'd love to do when we have a team for Atlas. Take this. Let's say the press is working. Yeah. And say. Okay. It's annoying for someone to copy and paste everything out of pylon into cursor and then back in the pylon. What I'd love to do is have like, a chrome extension. Yeah. Where you just, like, highlight it and it just does this. Yeah. It'd be awesome, right? Sort of like a Grammarly kind of thing. Exactly. Grammarly. But for, like, this. I think it'd be awesome. I was thinking at one point, like. A slack bot would be cool. Like this is where if we're already responding people in slack in theory. Like. Yep. Speaking of the like, type it out, have it spit the message back. And just copy and paste it 1 above exactly? Yeah, I think so. But anyway, we'll get there. We'll get there. Exactly. But hopefully, this is like building the building block. Definitely. 