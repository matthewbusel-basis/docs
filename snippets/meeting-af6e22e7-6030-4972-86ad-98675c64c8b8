## Meeting
Calendar Event Title: Flux Sync
Calendar Event Time: 2025-09-04T13:00:00-04:00
Meeting Note Title:Flux Sync
Attendees: Matthew,Boyce Young,Joe
Link: https://notes.granola.ai/d/af6e22e7-6030-4972-86ad-98675c64c8b8

## Transcript
 
Me: Always got Granola. Yep. That's the hard way many times. Okay? Cool. So, Joe, I know we spoke kind of casually about this, so apologies for any repeating I do. Essentially the current state of the world. And the platform right now is we have a pretty, I guess, what I understand to be low fidelity version of Flux Analysis here. Sorry. Actually, I have a feature flag enabled so you can't see it. But essentially there's a retool. There with a table that is apparently very limited in what it offers. And so we're entirely kind of replacing it with this new V2A Flux. And I'll basically just run through the designs. And feel free to interrupt me at any point if you have any questions on scoping or how we're thinking about achieving something technically. Or anything else you're curious about. One right off the top. Joe's just playing to me. One is if you just could mix in, like, what flux is. Because I just Learned about it 10 seconds ago. And then two. Is this is react based? Yes. And is the idea that module by module, we're switching over from retool to react? Basically, yes. The prioritization there, I think, has a bit up in the air, like, for example, transactions. Is all retail right now. That eventually is going to be replaced. So we're kind of tackling it one by one and then just last on that is, since some of them are retool still, are we constrained in our designs that be looking ritually. Yeah. They're aimed for them to look like really real aspects of the platform. No longer. And so there'll be a little bit of a difference, like depending on the module, some will look more like Read Tool, others will look more like our design system. Correct. Okay? Yes. Cool. So, yeah, just to brief background on Flux. I am by no means an expert on flux. But flux essentially is short for fluctuation analysis. And essentially what that means is it allows people to pivot or filter the data that they have in their ledger to basically spot trends and changes over time. In how certain data looks and basically tell a story and answer questions. In whatever way they want. And so I think, I guess, Joe, based on whatever background you have, feel free to correct me where I'm wrong. But essentially, oftentimes what an account ant's job as it relates to flux analysis will be is. They will put together, essentially a spreadsheet. That highlights some time period or some dimension of the ledger and compares either that dimension or that time period with one another. So you can see in this kind of balance sheet report here, we're comparing for a number of different accounts. We're comparing the balances of Those accounts for May 2024 versus June 2024. And then we have some dollar variance calculated between those two periods and then some percentage. And so wouldn't accountant's job might be is they would basically put together this spreadsheet. And then provide their own human analysis of why this variance exists between these two periods. If it is significant variance. And so what an accountant will do, kind of to do that is they might look at the ledger, the general ledger itself, look at, line by line, the transactions of, you know, for the pertinent periods, and then provide an explanation as to why at a high level. Like we're going to compare some time periods or dimensions and then have a variance column. To summarize the diff. And then we'll have an explanation when we run it. There is another report we'll talk about in a second. Called a trailing report. But so for this flux report. You can choose to include the accounts for balance sheet and income statement. And if you choose to include both, these will essentially be stacked on top of one another. So they will not be in the same table. It would be kind of like. It's harder to see the designs. But it'll be one table spreadsheet for balance sheet and then below it in another section. One table spreadsheet for income statement. I'm sorry. I'm just going to pepper random questions as you go. But who designed the UX for this? Tim. Yeah. Okay. And in fact, the ux for this was designed, I think. Five months ago before I even joined. Oh, wow. And we tweaked it here. We've done a lot of. A good bit of iteration as we've driven into it. Technically. But yeah. Okay? That's really helpful. If you have any thoughts regarding the UX or the design, by all means. Speak up. Oh, I know nothing. I just was curious how it even got to. No, here. It's great. I think a lot of this is probably just like, again, pretty standard ux. So cool. Joe says standard from, like, QuickBooks or something. Is that. Yeah, because this is a typical layout. You have one period. In this case, it's actual. Right. This is what the typical flux report in QuickBooks and Zero. Is that where they do it? Probably some variations here and there, but. It's not. Web design. Gotcha. Same thing with var explanation over there. Or what to say very. Simple. Yeah. Here's that view that I was trying to find earlier. Balance sheet on top, income statement at the bottom, and separate. Separate tables. Yep, I see that. Cool. So just to speak on at a high level, because it's, I guess, a lot of scope and rest time to speak on at a high level, the different kinds of filtering you could do. In flux. You've chosen the view type. Either. Let's say you've chosen Flux Report and you're doing both income statement and balance sheet. Flux Report essentially means implies you're doing some comparison and you're trying to find the variance between those compared periods or dimensions. You can compare time periods. Or you can compare dimensions for the same time period. Concretely, like what that would look like is comparing time periods was what we just saw. You would see May 2024, June 2024, and then the variance between those two. Comparing dimensions would basically be for June 2024. Or. Yeah, for June 2024, for example. What is the difference between. 2024. How did for this account, the Miami balance versus the New York balance compare and what's the difference there? You're also able to choose additional dimension values that you want included. You might have like a Austin, Texas or like a San Francisco here. The variance is only ever going to be calculated on these, like, primary two values you've selected. So you can also pick a year over year. You can pick year to date. Can you do year to date quota due date? Yes. Correct. So if I'm comparing dimensions here, then I can go down here and basically choose month, quarter year, year to date. These will all be relative to the period you have selected. Up here. This will be the. This will define the end date, and these will be relative to that. One like. Similarly, one thing to note, if we're comparing time periods, Then, you know, you can also do, you know, month over month, quarter, quarter, et cetera, et cetera. You can also add trailing periods. So. But again, those won't be. Actually, we won't be calculating any variance for those. The variance will just be calculated on, like, the primary two things you chose. It's pretty robust. Yeah, it's fun logic. So the calculation stuff like Reno, these numbers. That's pretty quick. Right. It's only the tip. What minutes? That's only the explanation part. That takes time. Right. Yeah. So. Right. It. It should not be on the order of minutes. That like loading this page without the analysis. That should be more on the. On the. On the order of like, in the worst case, it could get up to super unideal. But, like, 20 to 30 seconds, based on the testing I've done. But that's in the case where you're, like, you're, like, trying to roll up and compare, like, two or three years worth of ledger data, and you're having to look at all of the jellies. It's just, like a ton of data for our backend. What is jamming oh, sorry. Yeah. If I ever say anything. Like, database model related, whatever, just, you know. Jelly is a journal entry line item, okay? Yeah. And so for context, Obviously, you know, the Ledger software is a source of truth, but we regularly download all of the journal entry data and store in our database, and then that's what we're basing. Like these calculations all load. We also store trial balances. That are query directly from these, these ledger platforms. But there's no like a pre aggregated numbers, right? All you have is all the detailed entries. Is that true? Like in your journey, the reporting database, the warehouse pre calculate like year to date according to date. We don't. And the reason why we. Well, maybe I don't fully know the reason behind this, but I suspect it's because data changes often and we really, like, want to avoid duplicating data on the backend. We could, as soon as you try to optimize in those ways. You're duplicating data and it becomes easy for things to get stale. So it's just kind of a balancing act. Where's it worth it? Okay? Cool. So some other kinds of, like, filtering functionalities. You can do is. And these are all kind of like you can do a combination of these different sections. At once. So we could be comparing a dimension having, you know, trailing dimensions for year to date. And then we could also pivot by dimension. And to, you know, kind of define what pivoting would mean is essentially, it's like, Let's find actually concrete example here. Yeah. So let's say I have chosen. To pivot by. Well, let me take a step back. Are both of you familiar with the notion of dimensions? From a basis. Like standpoint. No. Okay, okay. So all. Basis has, like, I think now, six dimension types. That we map all ledger software dimensions into. For consistency, and that is like their class location department. Project employee. And then one more that I'm forgetting. But essentially, it's like any transaction that you would have in the ledger. Will have a column. For each of those dimensions. And then. That column may or may not be filled out. For that. You know, for that given transaction. But it's a way for you to categorize transactions. And associate them with, like, different kind of reporting. Space, right? Yeah. Okay. Yeah. So what we're offering in flux is the ability to pivot by zero from. From zero to six. Like levels deep. From a pivoting standpoint. So I basically let for the simplest case. If I want to pivot by customer, vendor. I would pivot rows, I'd choose it here. And then I would see that each of the account rows becomes expanded into essentially it's split up into of the, you know, balance of the accounts receivable balance this account, how much is attributed to like the receivable resour CE group vendor, how much to, you know, credit collect. And then that way you get a little bit more granularity into what is the source of this balance? How's this spread? You can imagine. That because we offer six dimensions, somebody might want to split those up even more. They might want to, say four Accounts receivable. For, you know, receivable resource group. Like, now I want to for this vendor. I want to split this up by project to get even more granularity, in which case they would just add a second pivot dimension, which would be project. And then that would mean that in the. In the ui. This row within become toggleable and expandable. Just like the accounts draw. And so we will offer six levels of this. Where you could have, like, six toggles down. Can you do something like only show me the lines that house more than 15%? Sure. Like increase, decrease, increase. Correct. Yeah. So that brings us kind of to our next. Well, I'll get that to then. One second. The next. Did any, you know, comments or questions as well? Okay? Next kind of like, type of filter you could, you could apply to flux would be filtering by dimension. So this would be essentially, I want every single cell in my table. To be to only show the balance as it relates to, like the Miami location. And then that would be, if I wanted, that I would choose Miami as my location and my filter by dimensions. And then basically everything you see here would be like, Miami related balances. And so you might choose. You might choose to, you know, use. Just select several different locations. In which case it would be. You know, some of those things, and there's this logic around, like, how we actually do that filtering, but at a high level, that's what we do. Cool. So. Last thing. Which is, Joe, what you were getting at is we offer this ability to filter by materiality thresholds. So essentially, like part. If we think back to, like, kind of, what is the reason for this module's existence? And for flux reporting in general. It's how. Like, how do we illustrate and explain anomalies in the data? Or maybe not anomalies, but, like, large variants. Because that is the most interesting thing. And so if there's variances, an accountant might not be interested in super small variants and therefore it's just noise in their, in their report. So therefore we offer an ability to specify the level of noise. That is, like, able to be tolerated, I guess. And so let's say somebody could choose basically, like, a dollar amount of $2,000. If a variance is greater than that, it will be included. If it's smaller, it's filtered out. Very cool. And so there's all. There's like, you know, you can do dollar amount, you could do basic percentage, you can do combination. So one condition is met. It's included. You can also do. Some other things, like hide zero balance accounts, things of that nature. So this is all, you know, towards the goal. Of. Ultimately, we want an accountant to be able to come into basis. Pivot and filter how they. How they need to. To tell the story they want to tell. And not in an export. The CSV and not have to touch the CSV. That's ultimately the goal. For an mvp. And like a V0. There may be cases like, we're cutting scope in some cases to where they might. It might just be easier for them to, like, go update some things in the CSV. But that's kind of, like, beyond the scope of what we're talking about. And just quick on product question and strategy, I guess even this, like, it has a lot of scope, which I'd say is, like, different than, like, you easily could have shipped, like, a super minimal version and then added, like, six layers. Later or whatever. Yeah. Is that typically the strategy with these modules, which is, like, even the V1 is gonna be fairly future rich. So I think. Right. Like, I am generally speaking. I personally am a huge fan of. Right. The iterative. Like. Yeah. I'm just curious. Different the reason. So this is very feature rich, out of the box. And I think the reason why we're going this route is number one, nobody, while people hopefully will be. Very happy to have this. We have not promised this to anybody. From a contract standpoint. There's been past features where we have promised some element of something and, like, we literally have to get it done. So we would like to get this done as soon as possible. But there's nothing stopping us from, like, really trying to get it right the first time. Right. And another thing here too is we know exactly what a flux module should look like. We don't need to experiment from a UX standpoint. Yeah, I say so. We can just kind of do it. And then second point, there are more technical. I think this feature specifically has been really good to think about the, like, everything that we ultimately want to do up front so that we can design it, design it in the code in a way that, like, is not painful to refactor if we were. Yeah, this is the six layers thing. I can imagine being a painful refactor. Yeah. You can do that up front? Yeah. Yeah, it was people in a real. I think we have, like, five minutes. I think probably we should leave a few minutes. What's this? Quick question. Like, can you do budget? Can you upload a budget? A budget, like, you know, a forecast or something like that. So it's not. It's not always like a actual. But it's. It's not your scope of this. That's all I need to know. Yeah, yeah. Not in scrap of this. Yeah, right. Yes, we did get some feedback about, like, forecasting stuff. But I don't know. One other question. On the run? Like the actual AI part of this? Yeah. Just. Is there, like, a visualization of just how that flows or, like, if I just want to get a sense of, like, someone clicks, run. What happens next in our code? Yeah. Yeah. So I'll go through this super, super quickly, but we can talk about this. Later, you know, if we want. Whatever. Cool. The. The two other kind of elements of this, as far as, like, actually using it, is we're gonna offer basically, like, yeah, there's some side panel, cool stuff, but it's not as important. We're offer number one, the ability to save a config as a view. So that, like, you can name it. This is my balance month over month, and every time I want to see that view for the next period, I just, you know, click it. And it loads it. That's one thing. Another important thing that we're including is this notion of, like, run history. So if I click run. I will be able to. A snapshot of the balances at that at the point in time at which you click Run. It will be saved. Along with the explanations. That were generated so that if somebody else comes in and, like, clicks run on new data that was updated. You can still go back and, like, get your report. At the same time. If you are viewing an old run and balance data has updated, we will warn you and say this is out of date. So rerun if you want updated balances. Yeah. So here's kind of like a general look at, like, what the run history would look like. You could see, you know, Richard Parker ran. You know, this saved view, and this was the output. I can view it. Jerry ran an unsaved view, which is just like arbitrary config, and then. I could go see the output. As far as you do it. Do you know it like if we actually. I do. We know if we actually have a month close cost, but meaning that once it's done. The historical records will never change. You know, if we have this? We have, like, close periods. And we have validation around certain actions you can and cannot take when you're in a closed period. So there's something people click up and say in that period's close, correct? Okay? Yeah. Yes. Yeah, and at a high level, that is Flocks. Super useful. Thank you. Not sure where bitches take this call. 