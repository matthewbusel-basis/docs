## Meeting
Calendar Event Title: Atlas gameplan
Calendar Event Time: 2025-09-17T18:30:00-04:00
Meeting Note Title:Atlas gameplan
Attendees: Jordano Granados
Link: https://notes.granola.ai/d/e8a654bc-c0e0-41a1-93b3-c568454724d0

## Transcript
 
Me: To get bugs. I went through the Watcher system looking at different sources of dox reputation. Just felt like if there's anyone that can help out with the non technical side of things, I can definitely do that. I mean, obviously you could lead Atlas and will own all the technical stuff, but if there's anything on just spitballing ideas, helping out with deploying it to the rest of the team, I was like, oh, I think that could be worthwhile. How about with really appreciate it again, I think that would be super. Helpful. What's the word right now? Especially before we build out the Atlas team. It's definitely useful just even just have someone to throw an idea at. Even if in theory I could do it as well, but just like to see if it's a good idea or not. So maybe I could throw at you. I tried to out of this meeting just like right down a couple thoughts. For areas like you mentioned that maybe you could help, and then you can tell me what's interesting. Awesome. So I kind of broke this into two piece. Of just, like, some general ideas and then some specific projects just to make it work. Great. So, yeah, maybe I'll just buzz through to them. We can dive in after. But. Okay, so, like, high level, right? Communicating with the team, right? Like Atlas even immediately today we're going to be making changes to get Bug. We're going to be building some new agent or automation that affects the team, or we're going to ask the team, hey, can you please go? Let's just say, like, update Granola in a certain way, so it goes. And they like all these things. We need to have line of communication. And so, like, I've had some ideas, but, like, help on how do we do that, and actually implementing it would be one big bucket. Second related. But it's building, like the culture around this. So ultimately, we're going to try to automate as much as we can. But a lot of this is if we're going to have a company context that grows and is live and maintained, we need the team to buy into that. And contribute to that, right? And, you know, if we're going to do that, it's again, it's just like, how can we go about building? And again, we could brainstorm, but, you know, that's one. Or 2, 3. Training the team. So you mentioned it. If we're going to ask the team to use cursor, if we're going to ask the team to use git book, if we're going to ask the team to use Tanya. Right. Like, they need to know how to use those things, so. How do we document that? How do we create training? How do we. How do we make training something that is useful and not, like, annoying? Feedback loop. So, like, in theory, the loop that I want to hopefully create is when there are problems in the business that can be solved, the Atlas team can identify those, right? I don't necessarily expect people to be like, hey, like, here's this problem, but we need some way to have an open line of communication. And then when we try to solve something, we launch some automation, some feature, etc. You know, like any product, it will probably not be that good the first time, but we need the feedback loop to make it better. Not till I get it to details. Sure, sure. What are you imagining? Where the sort of problems that. Yeah. Let's see. More people. Yeah, so is a. Like, the broad mandate is very general, which is, like, make everyone 100 times more efficient, you know, and so, like, a lot of different things can fall into that bucket. And so very like. What's the word? Like. Very. Generally, the idea would be first, collect all of the company's information in a single place being Atlas in the code base there. Then make sure that that gets, you know, iteratively updated and stays live, and then make that accessible to people through, you know, tools and AI. And so the type of thing that we like. DB like one example on different ends of this is like, we could say, hey, the best way to apply the company context is in customer communication. So whenever DI sends a message, we want to make sure that it's being run through a certain set of context before it goes out. Or we could say, well, actually, the best way to do it is to help the Engage team. And so that, like, the way we build features should be, let's first talk about them. Let's get all those notes. Let's, you know, apply that to everything we already know, and then let's have AI sort of design the feature for us, right? So it's like, super broad. But whatever we do, we need to make sure that, like, we're actually getting this feedback loop back from people. And then maybe I should bump this down to projects. But like, lastly, this is more specific, but you know, we should talk about I want to combine the wiki and the internal docs. It doesn't have to be immediately, but into one like we sort of talked about before. There's a couple reasons why we should probably do that. But. So that's another area. And then last, I'll just say a couple other specific projects just to, like, seed some ideas for you. Which is, you know, let's take these first two. The idea here is like, okay, before we start to build a system that is continually updating, let's just get our docs up to date. Now, if you talk to the DI Team like I was doing yesterday, one of their big complaints is that we don't know what is actually live in our product, right? Now. The external docs are out of date with, like, what the product can do. And so, like, okay, we don't necessarily need AI to fix that. Like, we should just go ahead and sit down and fix it. Similar idea with the internal docs, which is like, we have some stuff that's in gitbook, we have some stuff that's in notion. Like someone Jeremy today posted like a guide that is a notion getting the team to like have here's the one spot to go and it's up to date with the latest info. Again. Nope. Necessarily needed after that. 3 and 4 are projects like, okay, we've now gotten things up to date as of September 2025. How do we make this into a process that continuously updates. And so, again, some of that can be really fancy, like trialing a AI product that will basically, every time there's a new feature shipped, we'll try to propose an update to the external docs. Which is like the cool AI version of this. But then there's just like, hey, we should just have someone on the product team that when something ships, like is responsible for updating the docs. Like, right now, I think that might not be clear. Right. So anyway, these are broad systems and projects. And then lastly, here is just standardizing communication with customers. So I sort of touched on that before. But the idea is one of the problems I'm hearing from Di is like, we don't communicate. The same way to customers, and we don't actually have a process to communicate with them that is, like, consistent. And so, you know, whether that's just like having a monthly email, it goes out to tell them around, you know, what we've shipped. All the way to like. Again, the more advanced, fancy version of like. Before an email gets sent, it gets run through our AIs dem and it corrects it in a way that we, you know, meets our guidelines, right? So anyway, hopefully that gives a bit of a picture. I really just wanted to, like, seed some ideas. Choose your thoughts. Yeah, I think this is great. I agree. I feel like one of the critical roadblocks to take over is a building because ultimately. You might have a bunch of fancy tools. But if no one adopts it and no one feels willing to, like, actually contribute to building this repository and having it become this iterative cycle where, like, yes, maybe not gonna be great at first, but over time it's gonna get exponentially better. I think that's, that's probably one of the bigger roadblocks. But the nice thing is, like, Mitch is really pushing it, so I think having their support. Will go a long way. I think also small, nimble enough. To, like, do these things and, like, build the culture now as opposed to building the butcher one. 200, 500% organization. I think training the team is obviously critical, and so we can brainstorm on, like, how to, you know, to your point, Like how to build training materials and also sessions that don't feel like a waste of time. Or actually engaging. Beyond that. Yeah, I'll just. You know, building culture and kind of the mission map piece. I think, you know, one of my thoughts here is people aren't gonna do stuff, like, out of the goodness of their hearts, right? So I think that our best bet is, like, we need to show that it's, like, contributing to this is good for them. And so, like, right now, since we have nothing built on top of Atlas, it's like, you know, it's like, yeah, sure, of course I should make a doc. But, like, I don't know, you know, I'm busy, right? What I'd love to do is if we can figure out and again, this will be on the Atlas team over the next couple weeks. Is. What are a couple of these, Like, I'd say, like cornerstone examples of an agent or an automation that uses atlas. And so, like, if you're on the DI team and you're using, let's say, the customer communication agents every day, it's like, okay, well, I get for this to work well, I need to contribute to the broader atlas, right? So, like, I don't know what those things are yet. I'M trying to build a couple and figure it out, but that's my hope there. Yeah, it's interesting. Because that seems like such a great use case. When I was working with Matt on all things go to market. One of the biggest time sucks was just getting emails. Out. It's like triaging information from Granola, from gong, from all these different sources and just, like, notes that I took in just mental recollection. And then putting together a well crafted email. Matt and Nikhil put a lot of emphasis on, you know, good communication with customers. Super important. We obviously have a growing team. As the team grows, it's very hard for everyone to be trained on those principles. And I think. That's something that will deliver immediate value. Because even the other day. If you go through, like, the DI Channel, you know, there's many instances where, like, Nikhil wolves nitpick on, like, certain things. And, you know, it's like, hey, you know, we shouldn't say this. We should be saying that. Like, think about how much time is being spent. Providing that feedback when in reality we can automate a lot of that. A good example that, like, we can automate it is I actually built. It's just like. I guess it, like, stores all the memory in chatgpt. Once it, like, came out with that feature, I was like, oh, well, let me start building upon this, like, repository. And I said, like, hey, here's the basis. Customer voice. Like, whenever I'm communicating with customers, like, this is the short email that I want. And it was a very iterative process. The first few times, it was terrible. And then over time, it started getting really good, and now it's like I just put the email in. That I want drafted. And it can be, like, terribly formatted. It can be, you know, just spitballing ideas. And it'll come back with, like, a pretty well structured email and, yeah, I'll go and make some edits. But overall, I feel really comfortable to help, so I agree. That's, like, a really good, like, place to start. And I think that'll get a ton of buy in. And I also like the fact that. It's introducing a very simple agent. To the non technical folks. That'll be really easy. For us to understand. I think when you start getting like some of the other agents, That might be a little bit more complexity. And so thinking about, like, the strategy for doing that would be really important. I think on communication, that's also super important. For example, the other day. Mitch was like, hey, here is Codex. Like, you should hook it up. And it just didn't really get. It didn't feel like that message had a ton of traction. And so thinking about how we. I think that's a really good call, thinking about how we communicate these things. So that people act with the messages and don't just view it as, like, passing by message that, like, they skim through and they just, like, forget about. Rather something. That they like us. Hey. I need to do this. Yeah, it's really tricky. I love that framing. I think it's really tricky problem. And it dovetails with training as like the other bucket of when is it okay for just to be a message like I mentioned. We'll spin up this like P. You know Atlas Channel, right? And so, like, we might go, hey, like, just quick, quick update. You know, this doc has been updated or, you know, whatever. But then at what point is like, okay, we need to. This is a big thing. We need to set up a training session. I don't know yet, but I think the way you framed it was right. Yeah, I think there's, like, some messages that can probably get by. Just being sent within a channel. And I do think it's important to, like, give some weight to that channel. Right. Like we should think through with Mitch and, you know, maybe Matt. How do we actually get fined from the team? Because the last thing we want to do is just create a channel that people look at. And it's like, I kind of look at it, but, like, I don't really action on it. I'm a little bit worried about because, you know, people are busy. And people are busy, like they're worried about getting things done, and they'll always resort to the things that they know work as opposed to trying something new. So we're. We're, you know, trying to overcome that friction. I think it's very possible, especially as, like, we. We kind of address the, like, hanging crew. And then once people, like, okay, there's actually, like, a game changer. I think they'll easily start, you know, actually on most of messages. And create. What is that? Customer. Communication. Come up with better names. But, no, I think, like, these are great things to start off with. Like, for example, external docs update. Like, you would be a fool to not want an agent that's capable of updating the external box for you. Yes. I mean, it is so tedious. And I know that because one of the first things that I was tasked with when I got here was going through the entire external git book and updating it. And so I spent weeks just coming, and I learned a lot in the process, but it was really tedious, like, having to go into the product, having to ask questions, running like, wait, I don't know if this is, like, up to date, and then having to, like, bug someone. On the team if. It was just automatic. Right at pure point, like you're an engineer. You ship a new feature, it should maybe what it is like that person has to own getting that documentation. Into the external gitbook, but they serve as, you know, they serve as like the. Almost like what we're doing with accounting. It's like they serve as the reviewer of that documentation. Exactly. I mean, to be the one that shows everything. And so we can have, you know, like, we have a ton of context right now with the external gitbook and with all the written communication principles. On, like how that should be written and what should be included. And if that could take a first pass at creating it. I mean, the time savings are huge. And also, you know, it's huge for the customers because they read it and they're like, oh, my gosh. This is update. This actually makes sense. Exactly. And I think, you know, the team right now has just resigned to, like, oh, it just. We know it's not up to date. Like, so if we can just build the confidence internally that, like, oh, this is actually representative. Would be beneficial. But it's like what you're. You're saying is just maybe, like, donning me is that this is a interesting challenge for the Atlas team, which is, like, there's a lot of things that we can't really do without someone else at the company. You know, it's like, take the external docs, right? It's like, we could build some agent or whatever, but, like, until someone on DI, who, let's say is the reviewer, like, takes the mantle of, like, I am going to own this and, like, be the reviewer. It's like we will provide value, right? And so I think that's almost true of, like, most of these things. It's really unlike, I think, a lot of internal teams at a company like this. It is very, very like, we have to be very hand in lockstep with Di or, you know, recruiting whoever the. The team is that we're trying to help internally. So, yeah. I think it's like a relay race in the sense that the Atlas team is probably capable of, like, being the first runner. But then they have to pass the baton off. To the person who, you know, has a lot of the content. And can sign off on those things. Right. Because ultimately we're not going to provide external documentation without the review of someone unless things get so good where, you know not to. But for right now, I imagine someone needs to sign off on it. Right? So, for example, Elijah was, like, shelling out a bunch of external documentation. A few weeks ago. If he could save hours on end. You know, not having to actually put it together himself, but actually review it. I mean, I think that would probably get a lot of fun. 100%. One thing, so I mentioned it just in a note here, but I'll just say there's, like, one thing that I'm starting next week. Is a customer advisory board. I'm not basis. Does basis have this as part of like, with its actual customers? What are you envisioning for that? So a standard thing. Again, not like everyone does this, but like somewhat standard thing with startups is they'll form like a customer advisory board. So let's say they have 100 customers. Maybe, like five or 10 of them will be on this board, and they'll meet on some cadence to, like, show them what they're thinking about, get feedback, and just try to create, like, this. You know, communication channel. And so what I did is, like, Di is the first team that Mitch and Matt want me to have. Atlas try to help. And so I have a weekly meeting set with a handful of people in DI to basically just, like, start to have these conversations where, like, we go, okay, like, the first thing we're gonna Customer communication, dialogue. Right? Here's what we're thinking. You know, et cetera, or like, hey, it's live. Who's who wants to be the one that wants to help implant it. So I'm hoping that the advisory board is one way to create that communicator channel. But again, these are initial ideas. I'm very curious. A few other ones. And, you know, as we go about this, The communication channel. Is that directly with the customers themselves, or is that. Are you thinking. I guess maybe. I'm just trying to like. Sorry, the word customer will be confusing. I'm saying that the DI team is the customer of Atlas. Got it. Got it. That makes sense. Yeah. Yeah. So there are customers, I see. Yeah. And. And it's funny. Because that's kind of the framing in which I'm viewing this, which is like you're building product. And that product either succeeds or doesn't succeed because the customer finds value in it. In this case, or all of the employees of business. Exactly. Exactly. Exactly. And yeah, it's awesome because it's like you're essentially building a mini company. You're building a company within a company, Right? Exactly. But you're 100% like, it is a just like a company. There is no, like, the win. The company only wins if the customers are happy. Right. You know, and so that's the, the, the good part and, you know, the challenge. Right. So. And I think in this case, it's like constantly identifying new problems for the Atlas team. Can deploy to. Yes, yes. It's almost like consultative in the sense that you're saying, okay, what are your needs right now? Yes. Okay. Documentation isn't up to date. Let's forget that. Exactly. Oh, communication with customers. You know, isn't standardized. Let's figure that properly. Exactly. And then finding more and more problems across the organization. Exactly. And. And hopefully. So it's the interesting balance here is like it is that. But there's one way of going about this which could still be valuable would be like, hey, forget building out Atlas like the company context. We're just gonna solve internal problems, right? And, like, that could be good. But I think to fulfill this sort of vision that Mitch has of, like, hey, we're gonna be 100x more productive. We have to both do that, switch back and forth between, like, solving these very specific problems. And building the like system. That is gonna, like, you know, scale and solve a bunch of problems. Yeah. I think the initial form factor is let's tackle everything that's in front of us. And then beyond that, it's like, okay, let's have enough foresight to say that's not enough. That's not gonna unlock the 100x. Exactly. 100x is building those, you know, kind of recursive and iterative systems that are able to compound over time. Exactly, exactly. So I'm fully aligned, or I think we're fully aligned on just, like, the general challenge ahead. And some of the things here, I guess anything on this list. That you feel particularly drawn to or just like in terms of us working together on some of these things, what do you think would be the best way to go about. That's the most stuff. Yeah. If you could share the doc with me. I can give it a little bit more thought. I think it's more of a question. I would turn it on you and say, where would you want health? Sure. Because I think that's more important. I'm happy to help out wherever. I think it's more about. Like, okay. This you feel really equipped to do. You can use extra hands. You don't really need anyone. And so it's a balance between, like, okay, having another person involved. But having another person involved might slow things down, too. Sure, sure, sure. I think that makes sense. Then. You know, in that case, I'll think on as well, but I think my first thoughts would be around. Training and communication because they kind of are like in one, you know? Let me. I'll think more is something that comes first from you and Mitch? Yes. And I think once you guys have the principles for what the culture will look like, Then I can be a sounding board and say, as someone that's part of the general team, Like, how would I feel about this culture? Yeah. Yeah. Yeah. I think training, communication, that's something that I could plug into. Definitely. Like, I could definitely help with those two. I think creating the feedback loop, that's something that, like, once we actually start communicating, once we built the culture, And once we've built out these trainings, That's where, like, you know, we will start to get a better idea, like what that feedback looks like. But we can also plan before then to, like, actually think about. What does that feedback loop look like? And what the success look like? Awesome. Well, I'll say, like, let me pull up. Get back and just for one sec here or so. Let's open up internal docs. Cool. So what I did with internal docs, just to try to simplify this, like, I don't know if this will be the long term solution. But just to try to make something that we can build off of is there's now this idea of, like, each team deploy indulgence, engineering, hiring, operations. We can figure out the right names are. Has their own, like, space here. And right now, DI is actually built out a lot, you know, like, this is. You know, I think it needs to still be updated, but, like, there's a lot here that someone could come and get information. There's nothing in Engineering. There's nothing in these other ones yet, right? I'll build out Atlas, you know, myself here now as well, which doesn't have much either. But anyway, my point being that, like, what I'm thinking is that we want to start with, like, a RP for each team. It's like, okay, you know, I'm not going to be able to fill out the best practices for the operations team or the engineering team. Right. So, you know, trying to find that, like, leader that wants to take that on. You obviously been the one on, like, the team wiki side, which again, I see is. Related. So yeah, Thoughts on trying to find RPs for each of these to kind of like take them over and then eventually put starting to like, democratize that more and asking everyone to contribute. Yeah, I think that's a great idea. I think folks really bought into the idea of RP Ship here. So giving someone like RP Ship. Totally makes sense. And to be clear, I mean, you probably notice. But like RP ship doesn't mean they're doing everything. Our B ship teams, they're the ones that aren't in charge of making sure that things get done. Yes, and so they can very well. Take the task of, like, you know, having the engineering section filled out. And distribute that across the team. Yes. And so it's about, I think, identifying, like, a person. You know, there isn't, like, this pretty flat structure, like, identifying someone that, like, has both the contacts and also the ability to, like, get by. Let me ask on just taking some of these teams here. So in engineering, like, obviously the person with the most context is Neville. What? I'm sure he's like, insanely busy. Yeah, I don't think that's gonna happen. Yeah. So is there someone else that comes to mind for who would be good? At just. I think she's, like, in a unique position. Where she has now quite a bit of contact. She's very collaborative. I think she is a type of person that would, like, drive something like this forward. Even with her other responsibilities, because that's another thing. Is like, okay, you might ask someone to get it through this. Like I Within the internal wiki, there are some sections that aren't filled out, and I've been pressing them for a few weeks, if not over a month and a half, and it just hasn't undone because the RP isn't getting it done. Yes, and they have competing responsibilities, but they don't prioritize this. And so finding the right arrow pay is also kind of important. I think she would be a good one for engineering. I feel like Chandler. Would be quite good for. Not Ben. Just because. Yeah, his pies full of way too busy. Yeah, yeah. Like, he's also not very process oriented. Yeah, yeah. That's not his, you know, natural instinct. Like he's grid at what he does. But this I don't think is like a good thing to give him. Agreed. Does Chandler have, like. She hasn't. She just hasn't been in we've had a couple of these, like, hiring meetings the last few weeks. And she hasn't been in them, so I assume that she didn't. She, like, familiar with the actual hiring process? Yeah, I think she's familiar with the process. She may not be involved in every single candidate. Process. Okay. But like the broader 30,000 foot view, she probably has a pretty good idea. And I can also help out with that because I was helping out with hiring for quite a bit of time. Okay. Some other things had shifted. But I think she would be a good one. Okay. And then I don't know if we need operations as, like, a separate thing here. But I'm curious. I don't think we need at this point. Because I think it either falls into deployed intelligence. Or it rolls up into, like, company five processes. And I think adding operations just like creates too much overlap, for example, with internal wiki. Yeah, it's just I don't think it's like a good, you know, banker buck. I mean, yeah, there could be go to market. There could be, for example, you know, things on the sales side that as we start to build out the sales function, Yeah. More specifically, the sales team. Right. So, George, right now. He's the first sales hire. He's starting to close out a team under him. Like institutionalizing the knowledge. I think that would go a very long way. How we sell, how we talk about. Yeah, yeah, totally. And I think there's a lot of learnings from go to market sales that can then be applied to, for example, deployed intelligence. Understanding, like the full presale. That's a ton of context. Like someone. On the DI team should probably have. And also just like, how are things communicated? For example, feature requests. Like what? You know, those are like. There's just like a million things that come to mind on, like, go to market sales that I think would be quite helpful to lay down here. I totally agree with you. I'm just made me think of this like presales to post sales, right? Like, I just want to. Eventually Elvis gonna have to handle the handoff here, which is like. HubSpot is the place where we have all the information presales. Pylon is the place for all the information. Post sales. Linear is the place where you have all of our project management. Like GitHub. I'll switch that. I think that's a great call. This is helpful. I think the other one is just in terms of very specific projects. Getting the team wiki into like merging the team wiki into the internal docs would be one. I would definitely love your help on the thought here. Just. Well, if you have five minutes is like, this is a ultimate plan one, right? And so what that gives us is it gives us authenticated access only people that work in basis can see this and it gives us, like. I think we're using them yet, but, like, these tabs, we actually were doing it for external docs. Yeah. So, like, external docs has those tabs. So the thought here, audit and tax and all that, right? Is that, like, maybe we do the same here with each team, like, instead of having teams go, like, down the left hand side like this. I like that a lot more. We just like. Right. It just, like, keeps it very clean. I almost feel like you had the first two and we can decide order. Like internal Wiki and Atlas. They should be the starting points. Yes, exactly. Because those are high level enough. Exactly. Makes sense to be like the intro. And then you start getting to the granular team specific processes. Exactly. Yeah. I think, like, even to me, if we keep Atlas really tight and we say, like, here is Atlas, like, it is the whole company knowledge base. It's all the information. Like, the first thing you should do is go to the internal wiki and, like, learn how to be here. And then you can go into the teams from there that have more specific info. But anyway, I don't wanna. I mean, like, obviously it's not the end of the world, but, like, we could pay the extra $200 or $300 a month or whatever to do that and keep the team wiki separate, but I just feel like it's all part of one thing. I think it should roll into. Internal box. Awesome. Okay, cool. That's for sure. Okay. And just to give you the code version of this, because, like, again, maybe not as important, because, yeah, I can, you know, traverse this either way, but, like, right now we have. This is like, yeah, let's. Code base. Right. And if you think about what it is, these three are really the. Crux of it, which is external docs. Historical information and internal docs. And then we have this separate folder which is Atlas and Turbo docs as well. Which is. It's like. It's just like a weird. It's like an extra folder for. No, it's similar to this, which is like. It's separate, but for kind of no reason. So it's like a double win. It'll be cheaper and cleaner, I think. I agree. And I think it'll just make it so much easier. For people to navigate, to get bugged. Because right now I think people are like, oh, should I go to internal docs? White fly doesn't, you know, Internal wiki live within criminal dogs like they're just natural questions. So I think it totally makes sense. The only thing there is, like, a lot of people are reliant on the team wiki, especially new hires and so having a good transition plan. Where there's very little downtime, I think will be key. But otherwise, I think it should be. It's like. I don't know if you. Like yesterday, I was messing around with the things with internal docs. And, like, it is now fixed. But, like, for all of yesterday afternoon, it was like three or four hours, it was like, down. Right. And, yeah, I don't want to do that with the team Wiki ideally, you know. Yeah, I think so. That's only consideration. Beyond that, I'd say communicating with the team. Just saying, like, hey, here's the plan. Like we're gonna roll things into internal docs. This is what it's gonna look like. I guess another question is. When you look at the team wiki, it's pretty fleshed out, so when someone reads it, they feel like this. Is a document that's been thought through. Because there's so much new content that's gonna be created for those other segments, being hiring, engineering, so on and so forth. Are we okay? With. How are you thinking about best practices for, like, adding new content and using that workspace as, like, almost a scratch pad in the intro? Yes, yes. So I'm totally with you. That what's nice about this wiki is that, like, you can. It feels like someone's taking the time, and so you can kind of trust the information that's in there. And I think that we want to have this balance with this of, like, we want people to contribute. And so, like, don't be afraid to contribute or, like, feel like you have to sit down for an hour before you do. And there will be pieces of this that might be automated and, like, AI written, and then that stuff won't be as thought through potentially, as a human. And so I don't know. I don't know quite yet. But it is a good thing to just keep in mind, I think, if we, like, set up the spaces and, like, let people start to build stuff, then at least we can start to feel it out. I can imagine welding which would go, oh, wow, there's too much crap in here. We need better ways to, like, clean this up, but not sure up front. Yeah. No, just a thought. I do think there's gonna be a lot of content that gets built. Yeah. I agree with that. But yeah, in terms of that project, is that one that maybe you could kind of lead you might need. I don't have familiar with cursor like you might need a little help in my end just on the cursor side of things. But. But yet, like you mentioned, there's, like, a lot of pieces here of communicating to the team that's gonna happen, switching the URL and all that. Help out with that, okay? Maybe we could put some time next week to try to do that together. Perfect. Okay, sweet. Cool. Well, thank you. Maybe we start there and then. Yeah. As we have more communication and things come up, I'll try to pull you in. And like I said, if there's anything that you're like, hey, this would be really interesting, or just like, I would like to help that, let me know. Yeah, I think this is actually great place to start because a lot of people do use it. And so. It's a good place for us to test out the communication. Training principles. Yes, good point. And just getting people's feedback. That could be, like, the first go. And I don't think things will, like, crash and burn. Yeah. Because most of the documents are there. I just think we have to be mindful, like, until we poured it over everything, until we feel confident that, like, internal doxes in a fixed place, like, let's not cut the connection off. With the team Wiki. Yes, this published site, but otherwise I think it totally makes sense. To start there. I think that's. That's totally right. Yeah, let's do that. 