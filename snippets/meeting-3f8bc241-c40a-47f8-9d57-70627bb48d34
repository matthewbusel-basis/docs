Me: Start with that. I don't know if she thought that. Predictions, predictions, predictions. Okay. Hi. Predictions was requested a lot as a concept. Because it seems like. Should we granola up there? Oh, yeah. I'm going to ship her off. The granola architecture. Knife. When I joined basis. Three people know. And a lot of co and Mosque was actually written by Matovich, surprisingly, which, if you can imagine, and it was like thousands of lines ago. Madam, Mitch and I don't want to talk about the quality of the. But there was code, and it did do stuff, okay? And it kind of worked. And the first. And so this one I walked into. And the first problem they were solving. Some of those. They said a very first thing that a countess have to do is write down what's happening in the world. And the first thing you always write down that's very clear is things you bought. Or things you sold. Because you have bank data. To back it up. So somewhere in the world, if people remember this, there's the real world where something happens, like you bought a sandwich. And you have some chase. 1, 2, 3, 4. Bank account. Somewhere in the world, like, checking out or something. Has. You bought a sandwich and you sold $100 worth of stuff. And you paid another guy something. And it just keeps on saying all the stuff. And the first product they built was very simple. It said, one of the things that cameras do every day is they just write this down in their accounting system. And so let's go solve that problem. This ended up being a year long nightmare to solve. Well, especially with GPT3 and 3.5at the time. Which were terrible at their jobs. They were just bad at their jobs. But this is how you would. This is the first thing we did. At basis. How that would happen. Okay, let's say you have these things. Some people know this, but this is like the real world. Call us the real world. This actually happened somewhere. You actually, like, tapped a card somewhere? It's raining up. That actually happened. And then you have what's called the accounting world. And the accounting world is a reflection of the real world. It is an exact copy of it. Some way, shape or form. And so here also there will be an accounting account called Chase 1, 2, 3, 4. And then your job is to write the exact same stuff. Over negative 15, positive 100, negative 50. Except you would add the additional information that is accounting oriented, which is two piece of information that this ended like a date. One, one, two, one or whatever. The two things you would add are something called an account. And generally this is optional counterparty. This part was. Very simple. But this part is, like, optional. Ly to say this. And so for something like a sandwich, you would say that account would be something like meals. Well, okay, I'm lying here a little bit. Everyone here knows what a Jonah trade is, right? Okay? Great. So you have a negative 15, positive 15, positive 100, negative 100, negative 50, positive 100, a positive 50. The accounting world has pairs of information that it would translate this information to. And so this negative 15 will take something like chase, 1, 2, 3, 4. But positive 15 will be like, I got meals. I spent $15 to get food. Or I this would be again, Chase. One, two, three, four. The side of the bank account would always match. This side here. So the positive here and then this would be something like a revenue account. Say I made $100. And again, this would chase. 1, 2, 3, 4. And then this positive 50 I'm missing 50, let's say. You bought office supplies or something? So it would say something. Confused about this concept so far. Okay? So you would have these pairs of journal entries, and then the kind of buddy says who you did this with. So this could be like Chick Fil A. Or it could be like Shopify was where you made your $100 from. Or this could be with Office Max. Is that a built in do? They could be approach. This is a couple years ago. Yeah. So how would an accountant actually do this in the real world before base showed up? Well, they would literally log into the bank website, they would go through the transactions, and then they would open up their QuickBooks and they would split their windows side by side, and then they would go to QuickBooks and they would click add. New expense, add new revenue. Add new, whatever, invoice or build, and then they would manually go into that in. And so we would go to county from saying, hey, what if we did all of this? For you. Automatically. And that was. That was part of the pitches that we did. Funny enough, though, for the first six months, I'm so sad. Because you have, like, three books. Of the entire platform. And every day they would have, like, two transactions. And then one of them we predict wrong. Actually one of the most infuriating partners. Acupuncture, and I think capital expedience is the closest Aristotle. And we were most of the days wrong. And then Elijah would manually go in every day at 10aM and fix them. And then that was the AI fixing predictions. Every day at 10aM Because Lulu is like, you know, form JSON or something. Well, it was. No, it was just wrong and bad and dumb. GPT3 is just stupid. 3 is just stupid. I remember. Very long. Why didn't QuickBooks offer this product? Why don't they try to solve this? Great question. Well, at the time, gpt3 just come out. So the question is. This is actually a good question. How do you figure out if you see Sandwich? That it's supposed to go to meals. Where does this word come from? Or revenue. Or supplies. All the bank gives us is a date and amount and a description. That's all you have. And somehow from that we have to categorize it properly. And so this is one of the first instances where you could use the AI of AI There were some reasoning you had to do. And at a level like the reasoning was very simple, One thing you could do is you would say, find every time we've said the word sandwich in the past, find every entry of that. And see how it ended up being categorized. And take the most recent one. And just say it's that one. Which is what people did. If they saw something they didn't recognize either. They saw sandwich and they immediately broke down meals because they've seen it everyday. They log in, they do sandwiches, sandwiches, repetitive tasks for them. So they see sandwich. They saw something here that said, like you would see something like, this is a fun one. Mobile deposit. What does that mean? You wouldn't know and you can look at the history and mobile deposit would be like tied to Sometimes we could be Tantram Sometimes it could be tied to this sometimes we can add to that it would be no pattern and so human would have to go and find out call someone be like what the is this thing, you know, that's how it worked. And our AI Would always be wrong about it. Because we didn't have any question. And then because something that, like, looked reasonable but you didn't know, like, let's say, the set best five or office max, right? Office, max. Then you would look in your history and you would say, hey, what did we usually do with Office Max stuff? Oh, most of the time it supplies. Some of the times it's not. And that's where the idea of confidence came in. One of the things we started going in is we would predict this. Right. It was a prediction. That's where the word prediction comes from. And then we would give some confidence. Like this is a high confidence. This is low confidence. That's how the product. I mean, to this day, that UI hasn't changed. It's the exact same ui. From when I first tried the company. Slow. Medium high. Our wild guess. Whatever it's called. Some crazy word. So predictions over time evolved. With the gore idea stays the same, which is, you look at this description about this, you come up with this word. Neals revenue. Supplies. If you didn't have any historical information, you would have to make a best guess. And then your confidence would be low. Again. So a lot of it was calibrating, like the algorithm. Yeah. Model is just calibrating the. Other example. Let's say this is like one example of another complex. I'm not gonna go through all the complexities, but just one notion of a complexity. Let's say you have two. We have a chase. 1, 2, 3, 4. Which is. A checking account. And let's say there's some chase credit cards. 7, 9, 8, 6. That's your credit card. And your body went to stuff and then you page your credit card. So on the credit card side, you would gain $1,000. Let's say you paid off your credit card instead of payment. On some date. And then here you would have a negative 1000. Or, like, paid credit card. For cc. Payment or something. The way you would. You now have two transactions which would technically, you would think would lead to two different. Entries. But this is actually one single entry. On one side. You have the negative 1000. The other side. You have the positive 1000. It went from the Chase 1, 2, 3, 4 account to the Chase 7986. You would have some high confidence if that was the case. So usually each transaction would lead to one entry in your accounting system. Except in this case, there's two different transactions, but they both represent one event, which is that you transferred money from one second. So that made it a little more complex as well. Transfers, credit card payments were a little more complex. Than almost. But I just want to know that. In this case, though, what we end up doing is we make two predictions. This is where it gets conflicted, because this data comes at different times. This bundle might have the data first. This one might take three days to, like, process. The fact that this guy gave you money. So this data would come in first. We call it a transfer. We would make this entry. And if no one did anything, this guy would come in and it would have the reverse of it as its own entry. And we have to do some deduplication logic. To say that we're only gonna store one of them. Doesn't matter which one you store, but you should never store both of them. Sometimes you wouldn't have access to the seat. Let's say you don't have access to this data. Then you only use this one entry. Then you just create a transfer object. Any questions? So far. Okay? Do we handle this now? Yeah, yeah. But some of our lot of our bugs. That I just saw them today. Maybe. Some of our bugs were transfer logic and stuff. It was also like when we started doing parallel pushing that got complexity because all of a sudden people wanted to push a thousand things. And then they were like 200 transfers on them. But if you did sequentially take hours and people weren't paralyzed, it. But you'd have to take the trans person to them sequentially, because if they both happen at the same time, Then you have duplicates. Logic and all that stuff. We get prediction for the. Management Bowsey. And then they push it and it's like, pushed the TV or whatever. Yes. Then like three days later, that one. So when this happens. Okay, this act wasn't matching. I'll bring that up for a second. This is actually such a great point. When you see bank data, the first thing you have to do before you make a judgment call on how to enter in the accounting system. Is to ask, does it already exist in the accounting system? Because we don't want to rewrite it if it's already there. And you would get, like, three months. So this is the matching problem that I won't have to do in interviews, but it was like you would get three months of data. From the bank as soon as the plaid login connected or whatever, you get the amount of data and then you get the general ledger data, which would be whatever amount of data we get. And then you have to play a game called one of the bank has been already registered. And the ones that haven't been you now predict on that you don't do the ones that are already in. Accounted in the ledger system. So if only this year. So that's what. If you've read the word matching, that's just the concept. Matching is fine. Find the ones that have already existed in the system and find the leftovers. And then predict all those. So in that case, this comes in, you go and create this. When this comes in, you get match to this, which has special transfer logic stuff. And then therefore it doesn't get predictable. I'm gonna ask you. Matthew. Matthew. Any questions so far? Matching was where? I think I'm a little lost, but I'll. I'll do some Googling. There's no Google. We made it up. Okay, all right. We made up the more specific question. Yeah, yeah. Which is at the time that we first got the thing. Does that usually mention the card is going to like Chase 7 is going great question. No. So if the description has helpful, sometimes it doesn't. Sometimes they see easy payments, sometimes say something like 7, 9, 8, 6. But it's all in the description. So you take the description. And you search it in our DB to find possible other sides of this transfer. One of the things that the AI we'll talk about how prediction actually works. But. Yes, it would, but it's. It's not like it has a hard reference to it as much as a soft reference through the description. So. So that you essentially take this description and you search your back history and you would find that the other side was always this account. I see that's where it went to. And then you would be like, okay. Yeah. Even if they didn't have the card number, you might still be able to find it. Yes, because just the hit back history, it hasn't. The other thing that would happen. Is that? When you create entries into your accounting system, you're not just writing ledger data. Oftentimes people wanna enter it. Almost everyone here has done that. I'll explain this in a second. Just your click. So in QuickBooks, you can either go and create a journal entry where you go enter on these two lines. And just say one line to line and create a terminal tree. Or you can create an expense. Object. Let's say if you bought something, you say, I bought a sandwich. And instead of going and entering a journal entry for it, Go create expense object which you say $15 exponent chick fil a for a sandwich, all this stuff. And then it auto generates the journal entry. You don't have to actually manually go and enter again. So oftentimes, people. Good accountants. Would never actually enter in, I think, journal entries directly. They would go create expenses, invoices, invoice payments, bills, deposits, vendor credit, purchase orders, all this stuff. And then by them creating those objects, then QuickBooks handles the auto generation of the journal entry element event. So all that to say when we were predicting stuff. The other thing we would predict is a type. Object type. And so this would be an expense. Type. This would be a deposit. This would be another expense. And then this would be a transfer. We have to predict the type of the object. And the only reason we knew this was a transfer. Is because we predicted this account and both of these accounts are of type bank account. And so because both accounts are bank accounts, you know, it's a transfer. You couldn't. I thought we'd predict the type and then predict the accounts. But you actually predict the account first and then use that diverter. Like Neil's is an expense account. Yes, is an expense account. So you have an expense type. The type is free, type is downstream. Type used to be freaking, but as we got more complex books, we now use an LLM to also determine type. Because sometimes just even though you had certain accounts and stuff, It didn't fully tell you it wasn't example. So you could have. There's a huge function that literally takes account types. And number direction negative, positive to then determine what the type is. Because if it's the same accounts of positive, it's a deposit on the expense. Or an invoice payment versus a bill payment. So you would have. So it's signage plus accounts. Plus. Also software type 0, sage or quickbooks. They have different rules. So if you take those groups of information they used to a deterministic function that would spin out type. Yeah, because. Yeah. Just infinite education. There are so many education. I think that either an LLM fixes or what would happen is you would think it's an expense. And then if I looked at historical entries, it would say, oh, this is an example of it. Okay, again. You have the option of using an expense. Or the option of using a journal entry. To go create this entry, right? So historically, if they've been using journal entries directly and not using the expense type, then they want the type to Emmanuel interest. For some crazy reason that I don't really understand. So we ended up writing an override based on history. So there's a function called determine based on event type, and then there's a function called determined basis accounting, event type override, or type 2, I think it's called V2. And then if V2 exists, you override V1 account. I wonder what genius wrote that one type based on account I'd v2. What happened to count? We want us to deterministic one lead to overall that and maybe there's a leader. At the very beginning it was just an LLM completely determining it. Without any history. Without any history make a yes. There are multiple notes by Neville. As such. Yeah. Also by handwriting a lot of the rules confusing because something like a bank to equity accounting event would be labeled expense. To be fixed later. Yeah, to be fixed later. Anyway, it's big, okay? Going back to your question about matching. Right. So when we first onboard, people, you can think of it as like they've been doing accounting for years. Now basis is going to help them. But when we show up day one, People are always behind on accounting, so they might have caught up to. Up to, like, three weeks ago. You know, they might have done as much accounting as three weeks ago. And so all the data from three weeks ago to now, we have to go and enter. Or even more interestingly, they might have been accounting for 10 years. Or whatever. But, like, five months ago, they forgot to account for something. And so our system would actually detect that. And say it. Looks like I didn't say it again. This. But like all of the. The missing bank transactions, the whole thing is saying, hey, we looked at your ledger, we looked at your bank transactions. And we tried to connect as much as we could. And these leftover transactions are the ones we believe are not in your ledger yet. You know, it's a belief. And these are the ones we're gonna go predict on. And we Here's a prediction, and you can see that it's already in the ledger and you missed it, which happened. A lot. There would be some crazy reason why we missed it in the ledger, which is where we have what's called matching issues. Which still exist. Because if people didn't catch it, Let's just say the matching issues and then they just took the predictions that they just pushed it. Then they would have duplicate entries. Now. So if your matching isn't good, if you're managing algorithm is good, you would end up duplicating a lot of your ledger, which then infuriated your customers. That a fair purpose? Additional. Yeah. It's also your ledger data is incorrect. Yes. Yeah. Well, people would do. I mean. Remember that again. Accountants for the quality. Were hand typing in disinformation up until the user shut up. For the most part. No, I think they were always anti so that likely they would make a mistake was really, really high. Is that fair? QuickBooks had their thing, but you still have the bank connectors to like the main transactions are there, but you're still click click click click. Books has a thing where it would pull in all the data through a blog connection or something, but you it wouldn't predict it so you would have to go and do the work yourself. Just pull in the data for you. Until it got historic. Once it got historical, it would start to predict. Right? Quick bucks, Just quickbooks. They do make suggestions. They were never great. Yeah. Yeah, they've improved slightly, but they're still not good. Yeah. Mao is also obsessed with the idea that I mean it pretty. Like, curating because Matt was like, we will not. He was, like, refusing to take on any more customers until we got above 95% with prediction accuracy. And this was just not happening. And we were now kidding many more customers. And I was slowly going insane, looking at, like, the seven transactions for the day, knowing that they were wrong to try to do something about it. And that would be my day. Actually, it did that for, like, six months. That's what happened. Why did we. You actually did take out more customers, but prediction definitely was at night. So what happened? Predictions were. I mean, they got a lot better. I think that Elijah Annette review. What was his name? What is his name? Boog. In was a pair. Yeah. Was he ever even doing. I don't know. Yeah. He was. Yeah. Yeah, I think he was. Yeah. Predict. So many people went through a prediction review era. I think Annette went through one hate early on call. Yeah. Yeah. Every morning you come into the office, you fix your predictions, make sure they look pretty, and then you go to your customer. And then what we do is we get another dashboard that we had versions was one of the early six weeks, okay? And we would pull up versions of the times, we edited predictions. And we knew those were the mistake ones. We would go use that trying to figure out what happened. We go update our logic. Transferhole issues. So you get contacts this way? Yeah. Then we. When we started getting in, like, here and there, a few more clients. They would have, like, the early stage of basis. Like, each customer would come in and they would be doing, like, a vastly different thing. And it was, like. It was so confusing, and it didn't make any sense, and it broke so many of our rules. And that's where we came from. The principle of, like, accounting as almost no rules. Like, each time I would come up with a new customer, they would do some crazy, and I was like, this is actually that guy. But like yu came out. I remember Katie was such a nightmare here to you in Sawsville. They gave him an apparent hale. They essentially. They refused to use expense. Everything was a manual journal entry. For them. Okay. And the interesting point of everything being a manager engine is you didn't know what anything was. Historical is all manual journaling. It was just a bunch of account types. I don't know how they manage their books. And then like, oh, this is the other thing that happened. You write a counterparty That. I thought I made counterpart. This is funny. I made counterparty a required column in the database when I first made. It turns out 50% of all entries do not have a counterparty. People just didn't write down who you were dealing. And that's not like, here and there. It was like they systematically just didn't write down who they were, who they were doing business with. Because I believe, like, anytime you want to fill one of these in, you have to go to work. Like so you have to go hunt for information. So my. This is a story I made up. But the story is if you saw something on mobile Deposit, maybe go hunt and find out what the fuck that is. Or even just right now. Mobile deposit, I don't know. Revenue, who cares? And that's actually, honestly what a lot of accountants do, is that. I keep looking. That's my. I believe they're just like, oh, yeah. Mobile deposit. Because I don't know. Revenue. Anyway, it's the whole point of, like, any point of sale system is just like, oh, here's my daily. Sales. We're good. Yeah, we're good. Who cares who? Doesn't matter. Yeah. Unless that IRS comes knocking. Cardi blew my mind. I had to remove so many database constraints when KDU came along because. Looks like breaking every Just getting validation errors everywhere. The other thing that kept happening is matching issues, so I ended up imagining it forever. But the complexity of matching is very simple. Is like, okay. Transactions in the real world, and I come into often rewrite it in a different way. So one example of that is on the real world. I like to use this example. Well, I'll give you a simple. Like a landlord came onto basis. And they did a very crazy thing that I thought was insane. They would have a bunch of plus and minuses. Under transaction side. All throughout a month of, like, let's say there's, like, 100 transactions. Or 500 transactions or something. Some crazy number. And this is their bank. That's what I say. TX means bank and GL means the accounting system. And the accounting system, they would have two entries per month. One for all the positive numbers. One for all the negative numbers. Yeah, it was a crazy. And you just see positive 300,000, negative 200,000 every month had two entries. And we're matching. Algorithm had a lot of rules. For example, if I saw a negative 15 on January 1st, and then I saw negative 15 on the accounting system, they would also put different dates on it. For a lot of reasons. So it's not a direct transfer of knowledge. Sometimes you'd see a transaction on January 1, and the accounting system will rate January 7. So all of a sudden, matching had a time range. But what if these happen all across time and then this was all written on the 31st? So the things on the first would never mask to these because it was outside the time window. Other pieces of complexity checks. People would write the check into the ledger system the day they wrote the check. But you don't know when the person's gonna cash the check. They could cash it two months from three months, from four months, whatever. Right? So the transaction would show up, like, months later. And then you still have to match it because you wanna predict it because it's already in your accounting system. You wrote it down when you wrote the check. So there was all these issues with matching. So for cheques, for example, in our code, it says literally forever. Transactions look up and down six days to find other transactions. That was like a decent buffer. Sometimes people would systematically write stuff like 20 days apart. And it was, like, actually turned crazy. And so we then wrote an override that says for some books, You go 20 days across, and then for checks, you go 90 days. Plus remains. How do you deal with this? How do we not predict things? For the this one, I think you can expand the date range. It's also math to map. This is an easier example because, you know, the positives match and the negatives match. What would end up happening is, like, you would have, like, 100 transactions here and then, like seven here. And some subset of numbers. Added up to one of the transactions on the GL side. It's actually technically some subsets numbers would match up to some subset of numbers on the other side. Which was mathematically an NP hard problem. And trying to solve that actually broke our systems a lot. And it turns out that if you take some arbitrary number of hundreds and then try to use subsets, You actually have a huge range of the number line. That makes sense. It kept happening. Where, like, there would be, like, 30 combinations that all added to $171.49. And so you couldn't match it algorithmically. There was like all these. Google had these like, optimization algorithms you can find on open source libraries, and you use that, but it would find like so many different matching combinations. That none of it made any sense. We do an LLM now, there's a nice visualization. I can pull up people with, like. I like to see that. But is this in the Core Matcho movies, Nolan? Yeah. And the quash. I'm gonna now reduce some filtering. Then we dump the whole thing. Then I want to say. Yeah, there's some filtering. I know. It's one of these one the many ones, for example. We do something programmatically and then everything moves. Clm. Yeah. Like embedding. Would we go like something lm Dr. Per how to. No, you don't go back to programatic. You just do LLM. I think so. For example, this one Tristar benefit. Matches to this. These, like. This one Tristar benefit on the left matches to. So this is the bank transactions on the left. This is the ledger entries on the, on the right. So these are the journal entry line items that affect the bank account. Everything in green. This is the same match. So this one financial transaction matches to cross account names all of these journal entries. Very tough find. Yeah. It's mathematically very hard. Is it made easier by, like, we just, like, mashpin all first? Is that how we do it? Is it multi stage? Yeah, you do one to one matches that one to many, then many to one, and then many to many. Okay, so by then there should be all these. Yeah, you'd hold. You think so? Yeah. I think it's all in. Very interesting, Matt. It's nurturing. I think it's just matching still has issues. I mean, people might remember that accounting. Accounting has no rules. Would that? We've had issues. Alicia, I want you to underlying match on a basis. My task is by the end of the opera. H some English opinions on how matching could be improved. So I don't have any concept on what. So I can send you a target. There's been, like, three different make matching better projects. Yeah. Each time it does get a lot better. Yes. In what way? Like latency or accuracy. There's eval data sets for it. It's any of these. Just dumping. Literally. Yeah. You dump in all the transactions. I think it's still three. Or. I'm trying to remember. Gpt5. We upgraded it. Yeah. And then it just fits back out pairs that things mix. Glue, needles or. Sorry, do we have eagles on bridge? Roast for this. Maybe I'm just curious. I was rebuilt. It. It was. I don't know how much rebuilt they part of it. It was just like, oh, this is a significant improvement. I don't think we had, like, an email set for it. It was just, like, very obviously. Significantly better. Okay? So that's matching. I don't like too much about matching. So let's talk about predictions, okay? So predictions initially was a very simple concept. That said, take a bank transaction, and we're gonna predict what it should look like. And then that we would predict an account, we would predict a counterparty, we would predict a type. And there are a few other things, but, like class and department. Class and department are like, essentially, people like to use tags. So, for example, if engineering would be like a tag with the engineering department, like basis has an engineering department. So sometimes people would like to tag every purchase by the engineering department with the word engineering. So if you were predicting a transaction and you saw sandwich and the engineering team, people were the most likely to buy sandwiches. And you saw that in historical data, you would predict that the department engineering alongside the prediction. PLAS is another kind of variation of my classes, often used for locations. And so again. This is most of the time, but people do want to talk about so passes like if you had three different locations of like pharmacy locations or something, and they all shared one bank account. Then, depending on the purchase, you would be able to try to figure out which location bought this. Most likely. Based on patterns. So it's people buying stuff historically. So these are the things, elements of a prediction. And the key thing here is that a prediction is built on top of a bank transaction. So it would have a foreign key. Doesn't have any more. I'm setting up for the next phase of this competition. But initially, what we built it was sent it. We're gonna build on top of this bank transaction. And we're gonna predict all these fields. And then you just click push, and it would go into your underlying accounting system and it would create an entry with these fields in it. But that amounted. We made description mutable. You made date mutable. People like to put different dates. Sometimes people like different descriptions. You could not change the amount. Of the front end. Well, technically, on the back end, you can. Now, let's talk about this office max example, and let's say you spent, like, $5,000 here, okay? Sometimes it matters what the you bought for $5,000. If you bought computers. Versus pens that has different tax rules. And so here you would have one negative 5,000. But you might have a positive 500 for office supplies and a positive 4,500. For computers. Let's just say. This didn't fit into our original view of what a we kind of use along the nepnsplit. You would have something go into two different accounts. And so your journal entry has three lines. And so the way this got stored so the original model didn't store this is that we would make. There's another table called predictions. Let's you would join two, and then you would set the account ID on the main table to be null. And then you would put two different account IDs. One per row. In the predictions table. Spark. Can there be more than two splits? Yes. There are very complex tripods. How do we predict those? Like, how do we even know? Great question. We don't predict splits. Still. This has been on the timeline for two years. Give it a couple months. Transactions, context. So is that what that is? Yes. So oftentimes you couldn't just look at something and not explain it? You just couldn't do it. You don't know what you want. In a hundred. Unless someone sent you a picture of the receipt. Then an LLM could look at that. Read the receipt and then go know how to do a splunk tumor. So transactions with context. When you hear that project name. Is the idea that you predicting with some contextual information. PDF's, images other pieces of information in order to do usually splits properly. Where does that come from? People will give you the document. Like your client. Like, how do you client? And the receipt is a simple example. That's not usually the example. An example is. Donations to a nonprofit, for example. You would have this one big cash inflow into your bank account from all these donations. And then you have a Domer list, which should be like an Excel file. And we say who donated how much. And you would use that to split the transaction, which would be split to, like, 200 race. Like that would be an example of a split. Another ones are doesn't be like initial prediction. Like, let's do the prediction and then like, you know, the person going and uploading the collateral. It doesn't necessarily happen at the same time. Great point. The transactions and context project. Had a few different. This is part of the. We sculpted out, and then we kind of opened it. And then I keep asking Matt where it is, and he's kind of like, it's happening. But it was. It was two cases. One is either you had the file already and it takes a while for the bank to show up, or the bank should have set the file in either way. This is where the matching algorithms are interesting. You kind of have like a quasi matching algorithm between the things that a file has. And your bank transactions. That's another type of matching. So if I had a donor list, And I took on the bank transactions, I could run it the same matching algorithm on the two of those to figure out the bank transaction that those donor lists are talking about. Because it's just a matchup. So we ended up making the matching algorithm more abstract, which is what it is right now. It takes in two arbitrary lists of things, matchable events. Matchable events. Is that what it's called? Yep. Okay, great. And you can match. We also use the same algorithm to match invoices to invoice payments. You know, because they have the same amount. If you're paying off an invoice, $500. Your invoice payments $500. So you get in two sets, things. The matching algorithm became a generic algorithm for generic matching. So yes, splits would be shining some context. I know it's happening. It's gonna happen. Math has a bet on this. He has to dance in front of people. I don't remember. We lost the dance. What was the deadline for that? So what happened is, Matt, let's talk about transactions, context in, like, March with people, and we were gonna do it. December. The vet was from December. Okay, great. We were gonna do it. And I think to this day, we have all the technology to do it. We just don't have the time or people to do it. All the capability is there, and we've spoke to that and there's a project in the linear. You can find it, it's there. But, Matt, that's a moment. And she was like, that's impossible. You can't just read PDFs and, like, figure out splits. And he was, like, totally possible. And it is. But the bet was if in a year, That's not true. We have still human. I know. He has to dance on stage. One of the nice on speech. He just walked past. Him thank you with it. Are you dancing on stage for transactions context? Okay, so that's that. Good question. Presumably dcpa, which is in December. Adam would take, like, three weeks to do it. Someone just has to go do it. Are we gonna have matt, dad? No, I don't. Okay. Any questions? Other than that. Probably go on to the next fun part. Okay? Where edges came from. I just want the best ideas ever. Not utilized now, okay? It's just not used. Enough. Okay? So what happened is we built this product. And we did a pretty good job of it, and it became a reliable part. Of people's workflow and they would come in to basis once a week. By the end of the week, they'd be like 100 transactions. From there, they've been high, medium, low, and whatever. The thing is, they go to high, they automatically push that. They would go to medium. They look at it and kind of push it and they would load. They do fix stuff in low, but there would be only a few things in law, ideally. And then they would push that, and then they'd be done with their time. This used to take them hours. Now it doesn't. They're really happy with that product. Okay? So happy with the product that they asked us to build a feature which I don't know if anyone uses, but there is a feature called autobush that essentially says automatically just post the ones that you have high confidence in and just keep the medium y come in and just click a button every day when you kind of know that it's good. So you could request that auto push on and in that case the system would automatically post the predictions. Before you. We built, then the second product. That we are building called Geo Review. Not ideal review today because it doesn't matter. It's a bygone era. And, Elijah, I wish it still worked, just so you can show people it's actually one of the worst things we've ever built. And the whole time I get proposing the casts product, and I remember I was like, why don't we just have fucking Python code in? A fucking file. But there were some crazy and 11 agent thing. I'm going to skip over that part. Then we built another product. Called tasks. There's a whole three months of nightmare. I have six months. Tldr was. It was a terrible fucking product. What did they even do? Checklists. It's checklist, but instead of, like, there being an existing list of checklists in the top right, You could be request task and that would set a slack message. From that slack message, I could go into a ritual. 10 different sections of a promise. Just, like, set up where I could enter things into the prompt, specifying a thing that needed to happen. Some, like, job that need to be run. Like, hey, we need to check that some vendor was paid this month. Something extremely simple. I would have draw the different specifications that Josh set up the video. We go through this process. Where an LLM with some context, some long amount of context about what all of our reports were. Would try to create this code. How do I write Python code? They're trying to write, but it was also, like. This was like 3.5 or 4. It was, like, really bad. It would take like, five minutes each time and I didn't know how to review it, so I'll just be like, did this get the right answer in? The right situation, the Varyans or the wrong situation? And then presumably, like, two months later, somebody like, oh, no, that one didn't work. And I'd be like, what happened? I don't know. Yeah. If you want to read my. But every. The best part of it, there was no. There was no concept of a template. Parent task or period test. Every single thing effectively was a period task. And it would get copied over each month. And if you wanted to use it in a different book, You had to copy it to that book. So at some point, we were maintaining, like, a thousand individual period tasks. That each were a little bit different. Oh, you could also request, like, oh, I want to customize this one. And then that would you have the AI customized? And then Elijah would have to remember that that one had some specific customization. And I couldn't use it to copy it to other books. Anyways, it was a lot. It was terrible. And we never did again. Anyways, past that point, we started building checklists. And we talk about checklists last week. Last architecture night. I highly recommend reviewing that at some point because I actually like remembered a lot of stuff touring, and it was. But at some point, we wanted to build the capability of the tasks, saying, hey. It would say, like, hey, you know, am I missing a payroll journal? And it would be like, yes, you are missing a payroll German report. Or journal entry in your accounting system. We did a little spun and looked and couldn't find it. And here is the payroll report. You're supposed to go enter. Click here to enter it. Which is nice, which is a nice functionality. And so it would not only tell you what's wrong with your accounting system, you would then propose a way to fix it. And they would go into your accounting system and enter this information network. But what we did there is we just made some simple code that directly hit the, like, journal entry endpoint on merge. And that was it. It was a very simple thing. Any questions on that before we talk about the revolutionary idea? So while that was happening, Transactions application is getting more and more mature. We have better error messages. There were all these weird shit that could happen. We would post a transaction to a closed period and quickbook will forgive you an error. So you come back to the user and say, you can't post this transaction because it's still a closed period, or you were trying to post a transfer, but the other side that they count has been deactivated. That's an error. You like, show that look. That's maturity in the product. It had clear error messages, it had retries, it had all this complexity. And it was amazing. And it could boost expenses. Deposits, invoice, spends, bill payments, manual journal entries, transfers. Credit payments or credit car payments. Not vendor credits. But yeah, it would do like a lot of different types of posting and retries and all those complexity. It was doing all those logic. Right. It could work for quickbook Stage in zero. Stage is literal fucking nightmare to post to and we can talk about that some other time. But it didn't that's the record really quickly very shortly wide that they subsequent sage. Intact is one of the most complex softwares in the world. And people pay a lot of money. I don't even know how much, but I know it's a lot of money because it supports multiple entities, multiple currencies, subledgers of ledger is doing random crazy stuff, intercompany voodoo frogs. And you're like, whoa, amazing. But it's a nightmare software to use. And it's a nightmare. API. To use because the API has close to no documentation. And we've tried to find sage developers. Through LinkedIn and other markets, and literally no one knows how it works. Thousands of lines of code, and we're pretty sure that anyone who knows it is either dead. Are still there. And won't tell us anyone who's left is like, oh my God. The company locks them down. They don't let them put on their LinkedIn that they know how to do. No, literally, maybe makes it matter. Some of the best networkers right now in the fight, I didn't know why they could not find people on a certain page. So the amount of weeks we spend backwards inducing how Sage works is actually fucking wild. They actually do, like, some of the craziest shit I've ever seen on the camera system. It doesn't matter, okay? Well, we figured out. So they have all these subledgers, cdj, jj, cd, whatever the fuck. And based on the type, you have to reroute it into whatever. Some point, we were like, okay, we're just going to use CDJ and GJ and move on with our lives. And if someone complains, we'll fix it. No one's complained so far. DJ Sent for General Journal. Cdj central cash deposit journal. You had subledgers. It doesn't matter. Okay, so we figured it all out. Living right there. And on the task side, when you create a journal entry, It would just break a lot when you were trying to post it. It didn't have an error messages. It was just like a hacky thing. We just built a random feature and someone said, wait a second. You have predictions? Why don't we leverage the same exact logic? That we have here for all of the posting across all of our products. And this happened, like, six months ago. Five months ago. Very fabulous. And the only thing alcohol. There's a little bit of a hack and not a hack. I like it. It's good. So, first of all, we've moved the dependency that it's built on top of bank transactions. Now a prediction can just appear. Without it being based on a bank transaction. Because Tasks didn't have a bank transaction. They would say, hey, we think you should create a payroll journal entry. And that had. That came from a PDF. It didn't come from anywhere other than a year. And then we have to figure out a way to tie the prediction to the task. But also allowing to tie itself to bank transactions. And it turns out if you do that, then something like lined out of matching. We'll also need posting journal entries. Turns out posting journal entries will become a generic function. That a lot of different products would want to use. One line of matching. Flux is the one I'm thinking of. There's another product. Schedules. We want to do it. Workspace. Workspace wants to do it. Transactions products still has to continue to do it. And so we removed a lot of the no one knows how the stick works. I will go to out of the foreign keys and rules of the system and made it more flexible. And then now all the tasks. And all that stuff also use the prediction infrastructure. We ended up making a lot of required fields optional. And then just kind of, like, worked. And one of the projects right now, for example, is that for the longest time, tasks can only propose manual journal entries, but now they can propose expenses. Deposits, invoice payments. These other things. There's a few more objects. That predictions can push right now, an invoice itself, which is different than invoice payment, which is just saying, hey, I'm an iou. We don't have the building postat or vendor credits and purchase orders or kind of better. Credit card memos are like, let's say I sold you something and you ate it. Then I say, hey, what if I give you $100 off your next purchase? That's like a future discount. That you might get, and so that's a vendor credit. We don't post those. Any of that stuff. So that's functionality we need to add in the predictions. Module. When it not. So it could be like a generic poster. Of just stuff. But now everything now uses the predictions logic. But now the word prediction doesn't make that much sense because you're not predicting it. You were doing that for bank transactions. But from tasks and stuff, you can call it a bridge. But that's why I think the language is very confusing, because a lot of the Tasks products now use predictions. And say what? The business thing. But that's where it came from. One of the projects in the end of Q3 if we have time for it. And if you have comfort. So the other thing predictions can't do. Is update or delete stuff. You can only create so there's no updates if you find an error. If you're running a checklist item and it says, oh, you've created journal entry, but it's wrong. There's no way to fix it. And so one of the projects that we have cle d and it's just like we have the ability to create, but we also do cotton ability to update and delete. So if you find a mistake, you can't delete something. Right now. Through predictions, and so making predictions more generic in its ability to update and delete and also support invoices, bills, chronic memos would be. A super prominent. One of the projects, at least a lot of the Q4. But downstream vendors. Updates? Yeah, they allow updates and deletions. But do not merge. So you have to write pass. You can't do a word. Or it's just allow either. The interruptive 0 technically does reversals, but not visible 0 is actually easier because they don't allow you to update anything. Someone using zero thinks they're doing, like, an update, and it's actually doing a reversal. So how zero works is let's say you create a journal entry for a sandwich for $15. It looks like this. Let's say you go, oh, it's not $15, $16. So then they go, oh, okay, that's geometry number one. Let's create a journalogy number two, which is 15, negative 15. And then journal. Enter number three, which is negative 16. Positive 16. I like that more. Yeah. The right way to do it. The fun fact about zero. Which a nightmare. Is, they don't tell you which one's first. Or last. What? Yeah. So we have an algorithm somewhere. So if someone edits a journal entry, Like 20 times, you end up having 47 or 25,000. You end up having 47 journal entries. And then we end up trying to find pairs of them. And then cutting it out. Until you're left with one. And that's how you know. What's the latest journal entry? Yeah, it's called detect duplicate. 0 journal entries function underscore function there's actually clean days ago to arrow with that say get better because they don't even tell you the journal entries. Yes. Sage is even better. My actual living nightmare. There are parts of stage we still don't understand how it works. And it's actually infuriating. And then that's why we would invent economic events. And a few other things. It's like we talked about that maybe there's another topic for another day. It's actually. Oh, the last thing I'll say. Actually, this is a good point. I say that myself. So let's say, for example, you've never done business with Office Max before. In this example, when we predict, remember that counterparty is like an official. There's like a table of. They call them contacts, sometimes they call it vendors, they call customers, they call suppliers, whatever. But in QuickBooks there's a list of known customers. Or known counterparties. But if I see an office manager in Jackson, I look at your known list of suppliers or vendors, and I don't see office max in there. We still predict office max, and then we give it, like, a green color. And so when you push the prediction, we first go and create the vendor called Office Max in your underlying accounting system. And then we go create the expense or whatever this thing is. So that we can tie it to Office Max to kind of running. So if you go to the transactions module and you see things highlighted in green, that means that we are predicting that you need a supplier called Office Max in your official accounting system that you do not currently have. So that's one of the things we predict. When we're predicting, we either find an existing one or we'd say, you should write down that by the. One of the benefits is actually. And this wipe also accounts, like I said earlier. Filling counterparty in was investigative work. It was kind of annoying. And so a lot of times people just didn't account with counterparty Senate. It was not required legally to write it down. This is super helpful. To know. But when you joined basis, we would start telling you counterparties to add to the system. And we would start to create your holistic cameras, which you didn't have before. And so they liked us for doing that work for them. So we can create counterparties. Now, predictions only create counterparts as a function of creating a prediction. But like if a task. For example, one of the things I would love for us to do, which we can't do right now. Is, there's a task called like detect duplicate counterparties. Which tells you if you have apple.com and like Apple Inc. H. So you collapse it down. There's no button for fix that which require. Thing about how fixing that would work is you find every journal entry. You would have to update all of them to use one or the other. And then you go delete the other comma. From your accounting system. Like, if we could do something like that, that would be. Like another functionality that we just don't have. Exactly. Not architecture. This is helpful. Actually. All right. Well, that's it for me. I'll go look at the transactions module.