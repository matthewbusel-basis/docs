## Meeting
Calendar Event Title: Mitch <> Matt 1:1
Calendar Event Time: 2025-09-15T14:00:00-04:00
Meeting Note Title:Mitch <> Matt 1:1
Attendees: Mitchell Troyanovsky
Link: https://notes.granola.ai/d/32e3b86b-d621-49e2-9b40-f687c930ec1d

## Transcript
 
Me: By the way. I told Target, but I think he might reach out to you, or you should probably. Because he's very experienced agents, and I think. Fantastic. You should definitely tell him about Apple. I mean, he knows conceptually, it's just interesting details with them. Yeah. But I think there's a lot you can probably learn from him. There's a lot of commuters, like how we're doing everything. And so I think you guys should just chat. All right, we'll do that right after this. That sounds great. Thanks. Needed one very bad life. Well, cool. Thanks for setting up this one on one. I think that's a really high value. Yeah, I think. Perfect. Okay. Let's go through it. You want to go through your. Yes, I know you took a look at it before, so we don't have to go through everything. But. You'll go across. There we go. Of course. I thought we could just start with the blockers and go from there. Like high level. This is just taking a step back from even use individual three. Is I want to get to a point of like, okay, we have a basic framework for how we want to update ATLAS and build agents and automations around it, right? And then I can just go off this giant list we have, start to build some of them. As we do that, we'll come up with frameworks that are better. But I just want to get moving and providing some value through Atlas. Sure. So yeah. So these are sort of like three things. Just one. Just finalize. Do we like this architecture? Something else again? I think it's a two way door. So I come there. I think. Okay, so move forward there. Okay. Cool this. I'm chatting with yours today in terms of where this will live in Arnold. In terms of agents and whatnot, but I guess just like high level. Do you see this? I assume we have a framework we use for basis generally. You see, like, hey, we should be using the exact same framework here or kind of doing its own thing. Well, yeah. I kind of think that there's a lot of. They're pretty, but I think. I suspect there's lots of. Atlas, Asian building and context building that we can do before we need to literally go and add Asians in the code base. Because, like, for example, if we were updating agents in the code base, I would presume maybe the first one we would do. Would be refactoring Tanya bits. But I kind of suspect that we have lots of room on using off the shelf agents and then building the context on those off the shelf and just have them work well. And then building the do the custom agents. If you want to go start doing something, you should go totally down that. But my kind of assumption was that we would get the engineering team in place. And then try to get everything ready ahead of time. So that when they're here, we can, like, go sprint on that. Understood. Now, my hope had been that, like, one of the two guys last week would be but I guess it looks like not. So we need to, like, find some folks. And there's actually one guy who got, like, two espots. But that was kind of. I think so. I'm curious your thoughts. Like, I was not expecting you to be, like, writing a bunch of code in Arnold to do agents. If you want to. We can do that. But that doesn't seem. It doesn't. It doesn't seem like the best. Like the best. What's it called? Like outcome versus effort thing, because to me, so much of the hard thing with the agents. Is the context. Anyway that, like, there's so much we can do before we actually build agents around using agents that are not built for it. To use context. We do build, and then it's like, okay. You know, now because of this, we can now go and like, go build like our own thing. So let me just to make sure I understand, you say like, you know, I'm envisioning using more off the shelf things to start before we build anything. Customer. Are you thinking more like you said, like GitHub. Actions or, like, just. Just. What's that in your. In your head? Yeah, like, like, yeah, GitHub action that spins up. Sorry, when I say off the shelf agents, I mean like, like a clock code or a Codex or whatever it is. Versus we have our own agent that's going in, like, hitting tools and doing stuff, right? Like, I can go and give clock code. Access things and do tools that will, like, help a lot. Siri. So I think it's that, and then I think it's the. Setting up the like. Processes and the context so that those agents are ready for it. So, for example, for example, If I look at. I can find, like a Tanya. I don't think she is today, but like a time it's like. Okay, what is currently the biggest issue with Tanya when you refactor it? Because it needs to change. But honestly, the main issue is just that. It's just the Kuge complex. It has nothing to do with the logic. Like the. Like the. Like the agent logic, right? Then you're like, it's fine. And then the other big issue it has. The Covid. The other big issue has is that it doesn't have access to any product knowledge. So if I'm asking a question to it. I have to like. It assumes that I'm using the right terms, but, like, not. Not everyone on the team knows the database names. Like I said, the table names. Right. So, like, you're asking it in, like, in some other terms. And so does it have the context of, like, hey, here are all the things people could ask. Like, the types of things people do. And like, here's how Maps and Vegas, like, that's not a context makes this anywhere. Now, that is context. You could, you know, in theory add to it in a, in a hacky way that also kind of context that it could have, you know, a tool to go and access Atlas, the code base in terms of, like, there's 300 itself. But the network is like, you know, the obviously on the Ms. But that assumes that the context in Atlas is actually incorrect, right? I think that's. Yeah, I think that's the problem. So I guess I think that there's a lot of. I think there's a lot of stuff to do before we get to, like, writing agents in Atlas. I'm sorry. Writing agents in, Arnold. But I'm open to. So I guess I. I see where you're from. Here's my. I guess. What's the word? I think that thinking about how to make the context better. It will be easier within the framework of. Okay, what are we missing? So just like, just right there, right? It's like when we go to build Tanya and improve it, then it becomes very obvious that, like, we need this doc here. Whereas, like, maybe you actually have this all in your head already, but, like, at least for me, I. I don't know which pieces are worth improving or how they should be improved until I'm putting in the context of the actual automation or agent or problem we're trying to solve. That's a good point. Well, then I think. No, as I'm with you, I agree. So there. I think. I think none of the other thing is setting up the systems. For context to get added not by you, but by the organization. Into Atlas because I think that is what's needed. So. And even there there's an agent. So for example, one like very low hanging fruit is. The clawed code. Currently in Atlas. It's, like, very old, and we can move into the one I made in our dog. We should, like, port over that. Like, just copy and paste the same thing. So, like, that is a. Like small thing we can go and add, right? And then you could have like, you can then spin up clock code in GitHub Actions, for example. To look through Atlas. And come up with its, like, set of questions. You know, things it has, and then you can, like, answer those questions and, like, provide some context. And so I would kind of think if you want to paralyze, you could be like, oh, let me try to get Atlas. Like context, adding on some level of autopilot. Where, like people around the company know how to add. There's a clear procedure for if I add. Like, what's the steps? Like, who needs to review the pr? Do I need to make a pr? How does that work? Like what agents are reviewing my pr. One information goes here versus doesn't. Like all the different stuff, and I. And then. So is that. And then maybe there's some other, like, method for, you know, going through and improving that context. Like, maybe you have, like. Like in retool, you can make, like, a retool workflow. It's very easy. Where do you, like, run a cron to, like, once a day? Or in zapier, like once a day? Like spin up like the clock code, whatever. To, like, look at the atlas and be like, hey, is there anything doesn't make sense? I don't know, something about, like, okay, let's get this context to be, like, improving, getting better, and then now let's go look at specific stuff. Yes. That's kind of. I think. I think that makes a lot of sense, but I'll say, even within that. It's like, how do we want to just. Just generally, like, how do we want to go about building these things, right? Is it like, is that. Is it Zappier? Is it GitHub Actions? Is it? You know, I don't know. We were using OpenAI's, you know, SDK, whatever. Any of those things are fine by me. Like I'm familiar with GitHub. Action is the only one that's new, but I'm sure it's easy. I guess just like my third bullet point here of just. I think if you and I, like, for the next 10 minutes, just build, like, that agent that you had. Yeah, yeah. That'll give me the. Just visibility into. Okay. Like, here's how we would do it. You know, do these things, and then I can kind. Of run with it. But right now I think I'm a little blocked is all. No, I totally get it, okay? So I think the distinction is there is, like, Who is coating the Egypt. Is a distinction. Where like all the stuff I either I have built, I have said are ones in which the agent is. A existing. Agent using new context. Tanya is the only example today of a new agent. Using new context. But, for example, so, like, let's do. We can do this right now. Like, we can do. Unless you want to turn out. Yeah, Rose, do it right now. That sounds great. So, like, let's say. So, like, okay, if we do. What you're not saying this is the. Like, this one was zero pulled up. Looks and commits, gives people questions. Yeah, so we. Yeah. Looks at commits like this, for example. Is it? Yeah. So, like, I would never build a station ourselves. Right, because that effectively means we're rebuilding your coding, agent. Right. So. What I would do is I would look at either Devin or I know for fact Devin has get access. I think clock code also does. I think codex might also. And so that would start here is, I would say. You want me to share? Yeah. Yeah, that's great. Actually, I can. Say politeness. I think we should do it. I. I'm just. I'm gonna put more time to three. Perfect. So that way we can. Because I have an interview. 17 minutes. Fantastic. That'd be great. Okay? Okay, so. So first thing I'm gonna do here. I'm actually just curious. I don't actually know. What? Was. In the last. I just don't even know. Just to see if I think it does. End. Where they buy. So their wallets doing that. Let's essentially do a couple quick things. So those are great, because I want to do this anyway. Okay? Nice. Okay? So. So I can hear. I'll just share it quickly. So if I go to the one thing I wanted to do, I didn't mention this. Because it's something simple. Actions. Okay? So. Many ways. Like I the way one thing. And I can. I think everyone surgeons more is like when you think of Billy's agents you it's. I really think it's important to do like prompt first development. Which is very anti that I go to the way people would like to do things because it's like, It's like you're like. It's like. You know how. I don't know if you ever remember people used to have this way, like, oh, when you're doing product development, It's like write the, like, user doc before you, like, make the. Or something like that. Yeah, yeah. It's like, kind of similar, so it just makes it sound annoying, but it actually, like, makes it legitimately 100 million times better. It's actually built it because if you write the system prompt first, that will tell you a lot about what you wanted to do. Whereas I think the instinct of everyone, including me, for a long time, literally everyone in lt, to be honest. Still everyone in their own team is like, oh, we're add this new agent. Oh, we're gonna do this thing. Let me go build the things. Like, no, no, no. Write the prompt first. That's actually the hardest part because. And that will define what tools does it have? What do you want it to do when this. It doesn't mean that in the problem, you know, like exactly. The tool is called whatever. But conceptually, you're defining the environment for these. Right. So I'll show you. Right here. One of the things I wanted to add is when people commit to Arnold. And I was using some of apples as well. I wanted to add an action that does this. Where? This is here. This is like examples. Yeah, yeah. Where? Here. Where essentially, when you merge in. Sorry. When you. When you make a pull request, it will go and it will look and see if there's any docs. This example is about external docs, but aside from that. Sure. If there's any docs, this is Arnold, not Get Atlas, but there's any docs in Arnold that are now out of date because of your field. So maybe, like, there was a. Like there was a class definition and then you, like, changed it and you didn't update the class deficit's argument. Or whatever. Like, there's lots of stuff like that. And now Claude could complain to you. Like, our AI reviewer could say, hey, this is wrong. But there's no. It doesn't. Like, people might not have to look at that universe. And so you want to, like, start to put on an autopilot, potentially, where it's like, no, if I'm making changes, like, it will, like, update the docs or add docs where there should not. Have been like. What? If you like our policies, you have to have a doc string per class. What? If you didn't put a doc string, you should put it right now. Docs are gonna be as good as you because it doesn't have any context in your head. It's just using the code, but better than nothing. So that would look good so I can go into this action. This. Adding this action is, you know, five minutes. Like, I'm literally gonna copy paste this. Maybe change a couple little quick things because I wanted to conform to the other one I have because I have another cloud action. The hard part is this. What are we saying? What are we telling it to do? In which cases is it updating docs? In which case is not updating docs? Like what is. What do we actually want it to do here? Versus not. This is effectively the system problem. Yes. So if I were to go do this, like I would want to first write out this, and then I can go anywhere. Now, in this case, implementation so easy that I can just kind of do them at the same time. But the bulk of the work is really like writing out and deciding what is the logic. What do you want it to do. How should I think about things? What should I have access to? Yeah, yeah. Exactly. So that's kind of how I kind of. I kind of think about that. That's just one thought. We don't read this right now because. Let's do your other one. Just one thing I wanted to do. I just thought of this. But relatedly, a problem in Arnold, this will also be a problem in Atlas. Is. What is our ontology of where the agent should go? Look at. In terms of context. So, for example, right now. In arnold. We have some cursor rules. Okay? Like, if I'm using Arnold, it'll, like, go to these commercials. Fine. What if I'm reviewing the pr? Did I read entities, do I not? Where does it specify that? Right. If you look at what coding agents? Some coding agents. A lot of the support agents on MD now, not all. Claude actually does not currently support it. And by support, it means it's programmed to go look at that first CloudUS programs are clause that I'm gonna and so there's like a club that MD Here. That is like, go look at this other stuff. Is that the right way to do it? I don't know. Maybe not. But there's this, like, ontology of, like, which information sits where. And then based on that, You can kind of. It's, like, foundational to then, like, how the agent sort of works. So that's something that, like, I need to kind of figure out here. And there is, by the way, a guy joining in two weeks named Rory. He's on the data platform team. But so what? I want him explicitly told him this. I want him to focus a lot on making the coding agents in Arnold. Really, really good, because he's gonna get rush engineer. I think he's really, really thoughtful. On, like, how it prompt Vegas, because I think he can be, like, a good partner to sort of work with. On this whole join in two weeks. Sweet. So he's not like on Atlas, but I think he can do a lot to help the coding agents and Arnold specifically. And then he can work with the Atlas team and decide, like, what cross stuff, you know, makes sense. Work. Okay? Let's see if the answers came back here. So Codex doesn't have access. That's pretty cool. Looks like it, yeah. It does. Does that match? Do they match? One eight three. Oh, yeah. Let's see. It's a good question. Eight, five, nine, eight D. They do not. Very interesting. It's a good one. Let's see what the actual thing is. Because they didn't get pulled. It's because. Oh, you know what it is? I bet you Codex didn't get full and devoted. Ah, there we go. That's almost certainly what it is. The last one was. Yeah. Devin's, I think, looks right. The last one was. Oh, yeah. 3f 3fb 6b. That's not ready. This one. Oh, Codex is right in. There we go. So maybe Devin didn't get pulled. Up. I haven't do this. I don't know why I haven't do this. Maybe this is not right. I was doing some weird stuff. In general. But to have it. I need to reconfigure the. Like, the dev. Ision. More. I think we can figure the depth in. Startup commands. That's interesting. Yeah, I need to go look into that, because you can essentially go and, like, if you go to tell it what to do. Each time. Yeah. So it has, like. Where is it? In the repo. Yes, you can, like, see. Yeah. Okay, so anyway. So maybe something's wrong with Diamond Codex. Works. Conceptually. Now, which makes sense. It's actually to get, presumably. Cloud coder work as well, but at the moment, there's no cloud clock codes. It would have to. You'd have to do it in a. In a. In a. Action. In a git of action so it actually has somewhere to run. Yeah, but I believe it has the same thing. But I could be wrong. So what are we gonna do? We essentially need to. Spin up something that. Goes and, like, runs. The agent. On some cadence. So spins or something, runs the agent. And then hits like slack. Right. So the way I would do this. But again, we can do it differently. Is that you can do this on your tool, where they have something called workflows. And workflows is quite cool. Because it's essentially. It's very, very. It's like literally legitimate things. Like we have some problem. S. But anyway. So, like I mentioned, like, a folder here. Something like this. Is, like, not that easy. Okay, like, this is a hard thing. Like I was saying, that's, like, a cool thing to have. I don't think it'd be that easy to make, okay? Well, no, I think. I think it's possible, but it's like a. Like a. Not a 30 minute thing, not a third. Understood? But the 30 minute thing is like the like I think moving atlas to like if you go copy the GitHub. Like moving the Atlas clock code. To the same thing as this. That's that. 's like 30 minutes, because this, this is the one where. I want to share with you. Yeah. This is like the new. Like the. The Atlas clock thing is still on the old. Quad code. Get of action. Not using B1, so this is, like, much better. It's like. You know how when you push on the atlas, it does, like, this big thing? Like, the new one is a million times better, okay? So you can, like, you can copy this or you can look at some examples. Here. As well. Tend to do that. Okay? So? So I probably just want to think that's where you have, like. Like star Trigger, and it's like, once a day. Or something. Schedule. Day. Whatever. Just assume that time for now, sure. And then you would. And then, depending on what you're doing, you would essentially. You'd probably hit an API. So you would do. It's quite cool. What you can do is you can do like block resource query. And this case the rest API. But like we can add a new resource. Major to the rest API. Then you can, like, define all the stuff. You have it to hit the API. So, like, let's do a devin. Like, there's devin post API that's like spin up a devin. You can have it. Hit the API. To go and spin it up like, with that query, like, hey, you know, I don't know if Codex has been similar. But it doesn't. Hey, we'll rip a last. Five commits, you know, five. Five commands, whatever it is. And then. You would like get the names from that. And then, I don't know. Maybe you have the same densities or another one, like, go. And look at the code and I'll try to ask questions. And then I think you would have. And then there's, like, a slack integration here. Somewhere. For some examples. I'm sure you can do it with the. At the API ones. Well, but, yeah, yeah, but I think we, like, specifically had. Slack. I think it's already preconfigured. Workflow1. Nice. Oh, yeah. So. Yeah. Yeah. So you can use workflows in other workflows. I see. So workflow one is a slack thing. That you can configure that somebody made at some point. Where we can probably, like. Remove that. It's like somewhere. Anyway, so there's, like, you could, like, try doing like this. But I think a lot of this. And so then you can try to, like, get it together, or you can use, like, Zapier, I presume. I remember what you mean to use that here. But I know Zapier is good. You can just. Definitely, yeah, Zapier. I did a bunch of these ones that. Are like this workflow builder, but that's how generally I would think about doing it. But my larger point is I don't think any of the code for doing this, because the agent itself is almost certainly an existing coding agent. Not a custom basis agent. Okay? And so because of that, none of the code or the agent needs to live in. The repo. Now when we're like, hey, let's spin up the agent that. Uses, like custom context. Maybe that goes there. But to your point earlier, maybe you can do it all with loco. Like maybe you don't need to do any of that. I don't know. Here's my and I know you have to go in a minute, but I'll just say the the debate that I'm, I'm seeing or, like, trying to figure out mentally is, like, having it in code is nice because then we can eval it just like the rest of the team. And so anything we build, we can kind of improve, whereas if we do it in low code, I don't think it's. So easy to eval in that same way. But if we do in low code, it'll just make it easier to make a bunch more automations and agents and let like the whole team do it as well. I don't think it's a you. Or honestly, like, I think you do it in low code. To proof of concept it, and then if it's so important that it's like, relied on all the time, we bring it up. Especially because, honestly, like, even now, like, some of the distractions, I don't even like them that much. Like, like, it's not like, oh, there's so many amazing attractions in the main code base that, like, billing age is there is, like, a breeze. Like, I like. I think there's some refactoring in you anyway, so, like, if you were like, oh, I can refactor time an hour in, like a month or two months, I'd be like, let's refactor Sonia. Two months when, like, shelling box a little bit better, so. Yeah, because you only even need to really eval once. It's like, oh, this shit's important. Otherwise, you're like, you vibe until it's okay. It's working well enough. Yeah, exactly. It's like. It's like he's just, like, being relied on by lots of people to do their job. S in some critical way. A month, two months ago. Yeah. Understand? Yeah. Okay, so then just repeat backup things for my. Just, like, for today, basically saying we're not gonna have to go build any, like, custom agents for at least a couple weeks. So, like, for now, focus on just, like, cleaning up the docks. And if we are building any agents, they. Should be coding agents that are cleaning up the docs to. Is that your general thinking? I think that's right. Or other low code agents or luck that can do other somewhat more narrow things, either through like a zapier thing or through the retool light lift things that are not gonna be touching the code base as much necessarily. Okay. I do think that. Yeah, I think. I think that's right. I think there is. I think there's a couple things you and I can do together. Well, we're just for learning like I do think we can probably. Because Tanya is actually relied on a lot, to be honest. I think there's, like. I think if you and I spent 45 minutes, we can, like, make time a lot better. I'm talking, like, purely context, though. I'm not even talking, like, changing. Changing architecture. Sure. I think there's a lot of. Context that we can improve on for Tanya's on some just by its own. And then I think some of the GitHub actions, both in the Atlas repo and the Arnold repo. Maybe in, like, 30 minutes we can look at the list. I was like, that would be super helpful. Yeah, we do that in half an hour. Okay, great. In half an hour. I think we can do it. We can get done. The document thing. In Arnold and the Atlas review. One fantastic. Just because I'm not familiar with GitHub action. Just see you doing it, we'll be very, very helpful. Let's do it. Let's do it. I'm a big fan. I'm good, Grandpa. I used to, you know, 20. So I used to program them before clock because now cloud code has a whole. Like they have their own GitHub app. Which is why they GitHub Action. It's like cloud code V1, right? So it's like using their GitHub app. 