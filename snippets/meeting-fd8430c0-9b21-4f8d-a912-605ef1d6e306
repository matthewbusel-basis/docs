## Meeting
Calendar Event Title: Atlas architecture
Calendar Event Time: 2025-09-10T15:45:00-04:00
Meeting Note Title:Atlas architecture
Attendees: Neville Jos
Link: https://notes.granola.ai/d/fd8430c0-9b21-4f8d-a912-605ef1d6e306

## Transcript
 
Me: Some initial thoughts. Is one, I think, for product. I think we want to think of it as just code. Should have all the dots inside the code. We don't want to keep the docks of the code. Code is the doc. Or somewhere. So, like, how we merge those two is something we think a lot about. So how can I think AI should be able to read our code base and then understand what we do? As opposed to read our code base and then read some other thing to then figure out what product combines it to. Yeah. So just purely being the code. Should be. We want code to be a single source. Group. I mean Atlas then as a mega function of that. As one reaper or something. As a single source truth code is the single source truth, so I wouldn't split that color. I know much about customers and stuff. The company. I agree with you. High level strategy, philosophy, process. I can't tell if they're all different or safe. I think the biggest access is actually this historical active thing where you end up having. Almost think of it as, like. What exists today. Or company wise. And then there's all the things that led to it, which has a time element. And I think the one thing that's kind of missing in this whole thing. Is just time. As a concept. So right now, for example, the product has some feature that we're just built out. Like, let's say, line interacts. And so if you look at the code, you'll see light items. But now, if you want to know the context about what line and write this, you should be able to see that code. Is like how it works. What the point is? What are the constraints of it? What can I do? What can it map do? I think that's also code. How it got there. Is a historical question. I almost think of, like, there's no maybe. At some level, there's no. Maybe there's the stuff. But it's like any of the stuff continuously goes here, so this is always card state. These things are current state and this is all the steps we took to get there. And so I don't. That's why I don't think there's an activist or plan. It's a mobile. I think they're all kind of historical. Anything that's not this. And so I would. That's why I think of it as, like. I don't know what to call it. Work. Interesting word. Or, you know, whatever it is. But maybe it is. It's a series of artifacts, decisions, slack conversations, linear updates. All these other things went into, you know, hey, this product ended up being the way this was all the Granola notes. Yous know, all that stuff as well. So my big question is really, like, how time works with this. Company context. Because time. That's why I was trying to think about how product and company are always like, current state. Someone onboards, you're like, this is our process today. How does this process come about? Very different conversation. But, like, this is. This is the process. You know, I came into this. Rrv office. But there's a lot of conversations. Modifications that are predictive tie those all together. Well, then, just on the time piece, tell me. Like, to me, it can kind of, like, put through, like. This is the current state. Yeah. And then everything else is just information, historical and historical. Original. No, I agree with that. And so how you model and some. And these two things are things that we want to be very thoughtful about. It being updated versus, like, this is just sort of. And this stuff updates. If you could tie that or something, that's great too. So from a structure wise, I kind of think of it in those two maybe buckets. Where it's like, what is the current state? And then what is the. What is the version. In our code base. For example, I don't know if you know about the version staple. But we have very simple rule which is like anytime you do anything to our database, We add an entry to something called versions table. Everyone has some merchant table until C3 as well. Like like any change in databases for the commercial and so I use that for debugging. Constantly changing password. Deleted something. Any action you can subscribe. And so that allows for diagnosis of, like, hey, how do we just get here? Oh, well. Science. So you can have us all over the whole thing where every change. That helps you diversify. Stuff that I learned from, like, at the end of the day, we're doing all of this stuff so that every idea gets continuously intimated into this stuff. As quickly as possible. Like for example, like I just said, the RP process document has been updated in a while. The all that documents are updated in a while. Because it actually did it. But we're talking about it all the time. And so how could something who is listening to us all the time? Continuously updated. Say, like this Granola led to this thing. Yeah. And then how we manage time, I don't know. Like if. Like if there was a conversation. Happening on a certain date. Are there just a series of competitions. Maybe that's fine. At least they structured. I just don't know how to organize things across time. Well, let me take that split of. Let's just say we do. We can call it everyone. This stuff and, like, the active versus historical, whatever we're talking, and we split that into. Now. I know you want to like the binaural. Ity. For some of us. Active. Yeah. I guess my question is, like, in both these buckets. Actually, let's just start with accurate. Like there are company processes. In the wiki that are just like, here's how we generally think about energy stuff. But then there are tons of processes that are, like, very specific. So let's say, like, the dit. Right? Yeah. Yeah. Do we want to break this down? Until Mitch was initially closed out of Mitch. He didn't like that because he was like, look, it might not. These teams are gonna change. And things are gonna. Have you built onto. Person kept on it. Yeah. Okay? You building a telephone, which is like, you take a bunch of information, you're like, I got a structure. Right. And a dollar goal you're building is like scale setup. Very huge because later it's hard to change. If it's like, oh, you can put company bi processes and, oh, company crosses di, and each of those are, like, equally valid. Right. And, you know, maybe one way to think about optimal view. Which is how cyber taught by someone who obsessed with Randall years and how they respond again. And so his thesis was that hierarchical apology, which is what files in front of us look like. You end up looking at this, right? And so as you try to say, oh, there's Atlas, or Atlas, there's this. And there's this. And under that. Bi engineering. Eventually get into this thing. Where? Like some subfolder. Becomes repaired. Oh, these guys have to go. Oh, this is competitive here. Why would you make the repentant things top holders? As opposed to the state. Repetitive at each. I personally find that content, especially as much context as we hold. Is not well suited for. Tree swimmers. Hierarchies are not. Necessarily how our brain. And then what happens? Technically, there is a one. I believe. Which is also why I don't like our code decide to have the same issue. Like, if you think about code, code is a subproble. Which is there's all these concepts. And they all interact with each other. In these, like, crazy ways. So if you take a journal entry, Like an invoice. With, like, a payment or something? There's some, like, logic that happens at times. At the nexus of those concepts. Because code is written to file structure, we have this exact same problem where we can see structure. That makes. And I think maybe one way to think about this is to look at our coding structure. Where we set. Our code is we have we decided to get products. And each product has an API. Agent. It has eight jobs, which are, like, repetitive things that cryptos every day. APIs website. Agent is like AI. Then it has units of work, which I mentioned earlier, which is like, hey, these are, like, things to consume. All three of these call this. These units of work. Call these involved services, which are like, smaller functions that do simple stuff. And those services contemporaries. Which are calls to the database. And those queries use models, which are like how we model stuff in the Universal. So we came up with some tree structure, point B. We could. Collapse down on this stage. But the way we. I mean. The kind of rule of thumb there when we were coming with the folder structure is come up with a loose structure like quick symbol. You're gonna be wrong. Could be wrong with the photography. Just don't be tied to it. Know that it's wrong with something and then just make it so that you're not stuck by it. You know, which is kind of a tricky game. And so I would choose less files as folders to start with. It's a little bit of an oncology. They'll turn water complexity. You know, but I would really just have a folder color. I like this. Where it's like, you know, product. You have your slash company. And then I just. Even though this seems inefficient, just put everything in a flat structure with a. MP file and just leave it. If this is only 10 things. We can handle. It. You don't need to create more subsections. But if this becomes 200 things, then you can use that information to come over the substructure. Because right now you're too early to know what the structure is. And so I would just do, like, five folders. And then flatten it out. And just start and then pick like three axes and two axis. That makes sense. One could be like. Product company historical, and another one would just be like, now and past. And then that's your structure. And just start with my old bosses. Like if you're shove it two axes when you're gonna actually hold problem that you don't fully have a grasp on, just start with two of the axes that make the most fun of sense. And on each axis to three to five maps. And so the worst case combination of 25 combinations of things that could occur. In our product in the past. Product now company that has tough. I would. I would just. Like six or eight. And then even. And then everything else, you flatten out into that structure. You don't create any more subfolders. You can create any more subtle stuff and look ugly. That's fine. But you're using that to then find the apology. So suspending a lot of energy on front, trying to come up with a perfect technology. With metal information because you're older and start. Okay, and let me ask them. I'll take you guys. Improve with this grease. Yeah. Just make this right. Humans, right now. Just like current Star Trek using hip hop. There's, like, a way that I say I was just. A handful of people in cursor. And then we're not really doing as much of that, but a little bit. There's a tension here between. Like, if I were to just say, hey, we're gonna simplify some Hurd flop things. It's gonna break a buck. You're saying? Yeah. Hipf is now organized. Separately. From the code, like a summary MV file that organizes git bar. Yeah. There actually a problem right now? Is that good book and GitHub. Yeah, I agree with that. I kind of think I would just stick to the hip book example because you can think of code. Almost as like the place we've investigated the ontology the most. And come up with deep clean a structure for that humans can navigate. And we can navigate. And Holders know how to navigate. Maybe I can navigate it. But we have enough tested and tried out that apology enough to. Really understand how that structure works. And makes sense. And so both humans and human, though like people, are not technical, can navigate it. And I'm saying and then if you only skip book as your second source rich for Atlas, which I like, I think you should keep because I wouldn't even try to combine these two. I would just think what happens for non code reasons. To start. Okay, so we wouldn't even bother with messing with the structure. Yeah, which is the. Backed by a GitHub repo for Andrew Brand. Designed, but not like the code part of it. Let's just make it. Where I'm done. So if we go to here internal docs. Okay, so it has, like, atlas and product and different, like, the wood intelligence. There's, like, for the three boulders, if we go to the code. And we go to internal docs here. That's got, like, atlas the point intelligence. That's the same as there, right? Different. So it's got, like, runbooks and tool guides and product docs. Well, how is it? Why is that different? So the way that DIPW show shows this is based on a summary MD file, okay? So it's like a certain file that is unrelated from, like, the folder structure here, okay? So I'm saying there's like, all right. Yeah. I don't know. I don't know the answer. I just don't know. Let me look at the structure. Yeah. So I'm just at like, you can't look at this and know what get book would look like. Unless you're, like, digging into this summary that I'm def file. Yeah, I would anchor on the GitHub part of Stuff and not the. Okay? So just. Find you say get this clean. Focus on more on these two people that discuss. Yeah. Because if it's just a summary of my MD at the last second, Or something that feels like a projection of your data back out. But I think that I wouldn't. How we visualize information is different than how we organize it. Once you organize a really cool way, you can visualize it like a graph or pit book or some other way like you can. So the visualization element of an ontology is following the user half of it. Then the like. Actually, how do you want to start this problem and how do you want to store. So that's kind of my. That's kind of why the rest is just a projection. And so I wouldn't go. Yeah, I wouldn't go too, too deep. I prefer a lot of flat file instructions. Again. This is very personal in the program ontology building. Like, my background was like, you go to companies like, A big mortgage. What is all of the stuff? And then create, like, four axis. Kind of matter. Revenue. How about Trav El? And even from that simple ontology variability Bill. Oh, they didn't know that I go great. Why are you losing money at another Access? Oh, you're bad at this part of your email. They were like, great, we'll shut it down. Fantastic. And just start with a very simple structure, because there's so much to be gained from simple structures that. Like super common structures. And then you're stuck in the rigidity of the complexity infrastructure. Super simple structures are like, able. And when you find a better storm. And, you know, you're intelligible involved. And you should convert it into all of them. Like, version one of the technology has, like, two axis. And then each version will not. Okay, so just to say that loud and tell me this is what you're including as well. To start focus on organization. Code. Keep it very simple. Two topo holders. And I think this temporal thing is. Or active resistance, historic, whatever, something like that is probably rather darker. Doing that is going to give up. That's okay. Figure out how to get folks back to good enough states that people think now. But, like, don't worry about me playing. That's my personality. I don't use kickbooks. I've never used it, so I actually don't know what the can I use. Oh, yeah? Yeah. It's. I mean, this is kind of like that internal. External is like one cut point. Inside of that. These cut points are more unclear about. See, then you go agent principles. You know, agents can agent and it's like project and I would just flatten all of this out. I don't even know if agent platform tasks transactions is the way to cut it. That's an access to cut it by. But you're saying you're cut by product. Subproduct. Which I'm open to. I would honestly like the way. The one way to maybe I've tried to do this is like collect all the docs in a very flat. And just look at all of them. Do, like, 300 of them. Doesn't really matter. Just see how big it is. Sure. And just collect all of the existing ones. And then just see what ontology is. The simplest to cover that. Space. And then project out the other set of dogs you want, and you can just come up with names for them. And then you see that ontology works for that. Docs. And if it does, then that's your initiative. Because if he's trying to structure before seeing the docs, then you're gonna structure in a way that 's aligned with the docs. Okay. All right. I think this gives me a good attempt to, like, go rid something. And then I'll probably throw it at you and Mitch or something. Or tonight. Yeah. Take your time out of that ontology. Creation is like. Language matters a lot and work because, like, once you take a full grant, has a name. That name folder can't exist again. Right. So naming such a matter A lot. What are you gonna call this thing? And I get, like, encoder. That will be called stuff like just because I know if that word is from thinking everyone starts using that word or does that. Word is gone. From the dictionary. And our ability to communicate with each other. Is a function of how clear our language is and how concise it is. And so sometimes people go into the age and be like, oh, yeah, tool stuff. I'm like, what's tools? Tool communities, helpers. I will not have helpers that buy everything helps. I'm not like, I will not call a function helpers because it doesn't tell you how it's help. You know, that's why it's called, like, units of work. That's, like, now a common language. Everyone knows what that means. To work, and that has certain definition of what a user unit would work. Anything. Otherwise, anything could be anything. So language matters a lot in a talk. Last thing I'll say about neuralgy, which is how we used to organize information back in all companies. Technically, I believe. Because I was taught this by time. Sure I like Hierarchy is a terrible way to think about context collection. I think of context as. A Venn diagram, which is not how we organize data on computers. Computers are necessarily hierarchical. But at the nexus of the transactions. Let's say product. And with the client. And let's say Stephen, the person. What's another example? Let's say Tuesday. Like August 8th. As a date. Exists. I don't even know what the center is here. Exists. A concept and at the nexus of the idea of slack. Exists. All the conversations with Stephen from the Transactions app on Augustine. And so data or information? Is a set of tags. And living at the nexus of that. Is context. And there's a. This is an axis of time. This is not a firm. So you pick accesses products. People. And tools or something. And so you say for this tool, at this time, with this person, for this firm, for this product, At that is a complaint. Or something. So then anytime you can say what happened on August 8? What is all the things that happen with transaction transactions of lists four Whistle transactions. A week. You know, and so that's how you investigate data through the different axis of information. But in a folder structure, what comes first? None of them are like more than the other one. You can start with time and then go to Transactions and then go to lists. But then the folder structure doesn't actually make a lot of sense. You end up picking one of them as the first thing. Else the second thing. But then the second thing repeats in all the first ones. And so it doesn't. And so you end up having a lot of repetitive information. Which it's just a folder, sort of expand over time. Even in just, like, attempting to map some of this. I immediately recommend. Yeah, yeah, exactly. But the sad part of this is that because computers work in. English computers recommend diagrams. That's my goal. But because they work in hierarchical structures, You have to then somehow take this and then flatten it out and subtracture. That makes sense with some certain boots. So if you look at our code base, for example, Plus here. Do you have our Arnold code base here? I do, yeah. So if you take. Let's show you. So if you take ingestion. The product. Jobs, models, queries. Does not. Then if you take. Let's take Flux, the product. It ends up having the same stuff. Routes is now called API, so that's just a naming thing. But other than that, it ends up repeating the same folder models. And code makes more sense because there's actually cleaner structure we need to entire completes. Here. So there are other. If you want to look at this. Just of note. Like there are products. GitHub is also hierarchical nature. Right. At some level, Right? Because they're also doing files and folders, instructions. But some of the modern context collectors or company context collectors, which have actual products, we just take a look at that. Maybe because some of them have played with Venn diagrams as a way to store the information. Than trees. I'm trying to remember any of their names. I don't know. Also saying this because I started data analytics company for context management like as a startup years ago. I have a lot of opinions on this. But we did, Vendivers. And so at the nexus for like date for like a financial data. So the nexus of US Inflation core last year would be the time series of those concepts combined together. It doesn't matter if you start with inflation in the US it's just happen. So there's no ordering to grow. And like, the less you have, the more data you have. It's just a transaction boost. You get a bunch of objects, and those objects have different types. Some of them are documents. Some of them are. Oh, some of our other stuff. Slack messages, threats and solos. People have. I will say this. People have tried to. Solve this problem. Pre AI and power with AI. And so if they're also existing tools. I'm pleased that integrate into ways that AI can mess with and purchase your investment. Seems like maybe we can use level. We can leverage some of that. Yeah. If someone's put in all this headache, how can I handle the handle? Some of this stuff we don't need to necessarily function of can. Is it their AI writings for an ra? I would want our AI to control. But the collection of the information. Yeah. Managing all them and organizing them in certain ways. And stuff. Okay, thank you. 