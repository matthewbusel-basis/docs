## Meeting
Calendar Event Title: Ishan Malhotra (Atlas) Onsite: Colbert, Car Dealership 1 + 2
Calendar Event Time: 2025-09-10T16:45:00-04:00
Meeting Note Title:Ishan Malhotra (Atlas) Onsite: Colbert, Car Dealership 1 + 2
Attendees: Guozhen La
Link: https://notes.granola.ai/d/fa3acace-e575-498e-b989-9accee5ac5a5

## Transcript
Me: Like what eventual goal? Of what is sort of how do we add value? So it's like co Inc Iteration from your mat, other days from users. Sort of source variances. Whether it's on Prem or whether cloud. How can you start doing workflows on top of it? So using their data, but using a whole engine to the congregation to make changes to that did not even having other networks. Was around it. So how it solidworks is. We can call this. Divisible, like threes. This is. Let's go. This is. The. Data. There's always a card. This is public information, so I'm not, like, rebuilding. Yeah, but over here, how? These are all, like, clients databases, so it could be, like, we have different data connectors for different tables. So this could be 10, like, something, or it could be in, like, S3. Or it could be, like, some other source, but it's like, something on, like, Redis. And we have radar connectors that, like, lets you, like. Or you have Kafka and lets you get this, like, putting this information into Foundry. Now, there are, like, certain ways, like, certain things that we have to give it. It's not always just possible that you're able to just connect to clients like source. System. Without any sort of perms or any sort of, like, those kind of things. Sometimes you have to install and like a foundry agent. In, like, the client environment. That, like, that sort of pulls information from these different, like, data sources, and that sends information to Foundry and the permissions of this. Are set like this is in the client network. So that lets you, like, make things more, like, secure over there. And maybe just to back up a sec, just. You can just give me a little background on Boundary in general. So, like, what is. What's the purpose of Foundry? Like, I've heard that. Honestly, I heard it. I think I have a friend at Palantir maybe that mentioned it, but, yeah, you can go back. In there. So thank you hundred founders like data for like everything for like data. Whereas if I'm ingestion to parsing, to further processing, to finally doing like automations on top of the data like we do that. Just, like, by connecting to the, like, source system. So we connect to that, like, so eventually goes to, like, get that data into Foundry. Then do a bunch of interesting things that you can build on top of their, like, source of truth. Okay, Understood. So it's basically like the user has a bunch of data, and we're just trying to get it into our system so that we can do other. Okay. So, like, over here, like, you have. So. Yeah. So, like, if it's from S3, it can be, like a day back in command, like, party ofis. If it's in some other source. It would come in, like, different LED formats. If it's like, like. We're also able to put in information for like, directional point. So it might come as like, Excel files or like, or like CSV. So it's just like getting the information in. Then we have survey orchestration, not operation, but like, sometimes like middle layer which converts like this foreign. Data type. Into, like, something into, like, a foundry data thing. Like, it's like a layer on top of data so that we can visualize things better in the country. So all of the, like, computations that run, we normally use, like, We norm reused XPath like 5 spark. So the eventual goes that all this information comes in, we're able to. So like let's. It's in like S3 or it's in some other like format. If it's coming in like as parquet files, we want to be able to like transform in a way that we can, like, read it in, like, as, like, a pyspa in, like, Bispax. Like a spark data frame. That doesn't really make sense so far. Well, let me. So you're. You said it was a visualization on top of the data, so that comes much, much. This is just ingesting them. Yeah. Okay, so that's it. Like over here, you have parquet files coming in. And these are just, like, random files. How do you sort of change that into, like, rows and columns? Of, like, of some particular schema, you know, this is now. Is this now your database here, or. So now this data exists in our database. We've taken that. We also have other ways where we can. Like, we don't even. Like, we can skip this step. But that's like something else we do. Other clients. So. Yeah, so once the data is in. So let's say, like, let's say. Let's say, like, for the. For the. For, like this example that we're doing before, this is like our cars warehouse. This is like a carbas. So it's so like, you have cars. So, yeah, this is like a regular. Data frame that you can run like pyspark jobs. So that's it. Like, this is like. You have regular schema over here. So car id. Et cetera. Picture. Prices, whatever. And this is, like, assuming this is a, let's say, like, postgres database, right? Is it postgres for you guys? Okay, and so you're copying the same schema that the user had at this point? Yes. Okay. And then you were saying also with, like, a SharePoint file, it doesn't quite match that. You're essentially creating, like, a very simple schema for those, or what do you do with those? So. Yeah, that's a very good question so far. So for, like, some files where you have, let's say, like, you can have, like. Yeah, for most of the files, it's just kind of regular, like. Schema, but we have something called as media sets, where it's just gonna be like a huge. Like, there, it's gonna be like schema. Less. And it's gonna have. Yeah, it's gonna, like. It's gonna be, like, an empty. Like a collection of files. That you can visualize over here, but of course, you can't do anything. It's just gonna be like a file. An abstraction where you just have the file name. Think of it as a folder. It's a folder that looks like this. But we're not doing any schema. Change that. So once that's done. We can do a lot of processing over here, so we can have different pipelines. So this is just like buy spark jobs. That we just, like, do over here. So this is like doing regular Spark stuff. So let's say we have a cars database, we have prices database, like a prices table. S. We can do basic stuff like join or whatever, like have SQL over and then this will produce another more like aggregated like etl. Which is like that includes things about cars and prices. The second one is a simple example. Once we think we've created, like, a very, like, artist source of truth over here. So that's not the source of tool. Maybe like this is aggregated across different tables. We call this a more like social truth, because this is like pulling in information from the client side once this is ready. So let's say this is like a car's data set. Or like. And over here you have car information, but you also have price information. You also have some other, like, information once that's ready. Then now we enter like the. We call this ontology there, where we create a second, an abstraction on top of this. And the purpose of that is to make things more, like, user friendly in the way that, like, we want to. Like, they should almost resemble, but it should be like a digital twin of your organization. So let's say for like, our, like, the example you talk to, like, the warehouse. There should be, like, just a car object. A car has different like properties, like car id. Card name, car price, and the price is coming from, like, like, it's impossible that this data set is actually being produced by, like, bunch of other tss that you're, like, just like, joining together and like, producing it. So this is one. Now we can have a similar, like, setup for, like, warehouse. Like, Warehouse is another, like, something else that's also coming from there, like Source System. Maybe it's something that it's not coming from their sources. So maybe we just, like, we've created, like, an empty tier set here by ourselves that, like, with which we have created this, like, where I was object. And the interesting thing is that, like, we can define, like, links between objects. So this is like having postgres, like, we can define, like, relation between objects. So car would normally link to one way, so it's gonna be made to one relationship. Wouldn't you get that already from just like the client database? Like, why do you have to define those again? Yeah. So for them to exist over here. So it, like, does exist from, like, from the client devis. We're not, like, getting any of the relationships. We just. Yeah, we're probably getting, like, the. Like. Like the keys over here. But we have, like, redefined those, like, relationships. Over here. It is possible that might like, create more or not have the same relationships that we defined in the client database. How did you guys figure out to take in again presumably these massive databases, multiple data sets, and then sort of assign your own relationships? How do you guys. Have to do, like talk to people. Like we're getting an information about, like, their locations. We're getting information about their cars. How do we make sense of that data? And they're like, okay, like, if the location has this column called location ID the car location, the car object has another object has another call, which is like, locationary. So it's like a one to many. So many cars can be part of the same like location and that we can define over here. And that we have to do. And so once those, like, relationships are, like, set up, then we can. Like, so all the. So all the visualizations we build are on this level around the ontology line. So this is where, like, the modulation of business. So like the eventual is that the user on their end. Can start building things with just like these objects. So the end user, like the data scientists or like the business user at some company doesn't need to know where which redis which redis Oracle like table A particular impression is coming from. Once it's in the ontology, then he can just start defining, like, making, like, things. Making workshops, not works for, like, making dashboards and stuff. So we have like, another, like, sort of very simple, like, UI builder tool where you're able to visualize all these objects. So, like, it's gonna be like a level where you can see all these different objects or different cars, but we can just calculations as well, so we can maybe. This tar object has another property which talks about, like, I don't know, like. Reviews. Or by then it reviews. Let's say we have another asset. For reviews that we pull in from their source. That that is linked. That has your car ID on it. That, that we can define over here. So car is linked to various, like, reviews. So for a given card. We can see, like, we can travel as this link. In sort of abstract. It's gonna be. We can find the foreign key that links to reviews. And find all. The reviews, depth of the bad, and we can do, like, interesting things on this. So we have this for, like, The agents that we have at Time here work on the ontology level. So I can have an agent? That has access to cars. This object cars, and I can be like, okay, like, for all the. For this one car, show me all, like, the. Show me all the. Reviews so it connect. Reverse this link from car to like feedback to like review and like list you all those things. We can do other things like similarity search and stuff. So this is like one. Well, data flows from a very basic by way, like simpler version of that, but data flow is from like client side. To like the end Dashboard and. The last thing is, like, how do you write back to there? Like source system. So we can define like these webhooks. Like, we can be able to call it, like, APIs. That can, like, change their backing data source. In real cities. Interesting. So is that how the data flows back now from people make edits? They went to. What is it? Learned like. Like flow back. The goal is that they just start using this. They don't care about the data going back. And we have ways that you can also, like, let's say I want to add a new car. It doesn't have to come through, like, the client database. I can also just, like, have a fact that adds it to, like, this database. Like as like a robot over here. So that's, like, what you call, like, an engine. So it's possible that, like, let's say we have, like, a pricing. To dsl. And like some pricing analysts like, okay, I've only changed this price with this card, then we can apply that edit. For the same database over here. The way it works is, like, quite interesting. I can go into details of that as how we maintain these edits. But, like, an end user is able to, like, change, like, data from, like, this, like this table, and that gets reflected into, like, the ontology. Gur. It's like, never. Probably. Explain this. But we have a good job. No, no, you are. This is good. This is definitely helpful. And I think laid out very well. I'm just looking at the pipeline piece because I think, yeah, certainly, like, these two ends are very simple. Right. To understand. And then, like, it sounds like a lot of the. Yeah. Did stuff happen in the middle. It's not, like, not that bad. It's just, like, regular, like, five spark jobs that you have to run. To get this thing updated here. Well, thank you. Okay, cool. It was great. Yeah. Awesome. Well, great. I think the last thing we'll do here is maybe just chat about. You had mentioned that you put together, I think a deck about Atlas. Do you have that, by the way? Yeah. Yeah. It's sweet. I would love to just, like, take a look together, and then we can maybe wrap up with, like, any questions you have, and then maybe Ben will come in at the end. What if I want most of it? When I was talking. About the other one. I mean. Just thinking. Yeah. You can have, like, something. Sometimes you're doing accurate and doing the subjects, because this happened to, like, three phases. Where in the first phase, you were, like, sort of powering this, like, after Scott X and only solving for search from the engineering side. You have all used different things. Like, you can do, like. That just gathers, like, as much context as possible. So it can be like, if I, for example, in like the, in like engineering, you could add like, these are the dumb examples, but you could add like different tags and PRCD record that. So, like, it's a. It's an intentionally. You tend to build this, like, complex side to add. Yeah, same as, like, you can record emails. And add it to the either as something that you want to add to like the content. How? Well, so like when you add Note, tag and GitHub, what would that do exactly? So this we can have it sometimes your GitHub automation that like just records this and over here. So like basically like looks at all the it like stores the stores the. The that was made as like context or like into some sort of like search able like data layer. So we know like what? Basically user did it, when did it, what were the changes? The main reason not to just do it automatically. Why had that note. I mean, like, you don't want to, like, populate. Like, this is the. This. If this is what your agent should be running on, you should be more intentional about, like, what you're doing so intensely, like, adding, I want to record this. This is a good, like, sometimes it can be a bad PR Whatever, like. If you don't want to, like, add everything. Sure. So just be more intentional. At least right now, as we like starting off, it's a good idea. Yeah, similar to like adding like nodes to like adding or to your emails. Like it copies that adding notes your zoom calls or like records and transcribes that. For employees. I feel like all your slacks can be always lacked threads, not like just private. Yams can be like something that you also like store or like some sort of like summarize version of that. So that's what I think. And yeah, so like, when you sell solved for this, then it's like, it's much easier to find, like code based code, like repos finding changes that were made. Like, finding, like, slack conversations. Right now. Basis is, like, super small, but, like, I'll handle it. Apparently, like, the biggest problem we have is, you know that you saw this before. But you just cannot find it. Find I often have, like so many other people, have the same exact issue before. Solving for that is a very good thing to do. Because. Yeah. Well, I'm features like, other things. Like, you're finding, like, previous conversations, like maybe like slide decks and stuff. And also, this is like a. Like a easy, easy when it's, like, all your HR stuff. Or your company policies, like if someone is unsure about, like, if a certain day is off or not. Or like how the compensation works. Like it was beyond. Like this. This. It shouldn't be part of this makes sense. This is, like, probably the simplest thing to do. Just like solving for search second is like Analog spoke about this, but, like, how do you make, how do you like, Make sure that you are most efficient. And I think imr surprise. I know, like, what tasks I have to do. And I can, like, have, like, an agent doing each of them for me. At the same time. So I think for engineering, how this could look like is like somehow the agent. I think every age, every employee can have should have its own, like, context of, like, what all things they have worked on in the past, like, let's say a week. And that is also context. And then like over here in cursor. A part of your. Yeah, you're like, cursor. Rules will be like, a part of your context and be like the code repo you're working on for that task. The employees like previous tasks. Any, like, relevant PIs. And that produces that prs to review. Of course, if there can be, there are, like, different. Different ways of doing it. Like, if you look at. I've been looking at some, like, articles of how we can, like, fully automate stuff. In terms of, like, you produce something, but you need to, like, you can also, like, break this out and be like, you have, like, you have different agents doing different things for you. One is like, one is at an orchestrator level. Then you have, like, a person that runs the job in one, like, the reviews the job, so. That could be better. And then for the op side. Yeah, like, this is definitely more doable than someone just knows that these are the types of, like, emails I have to write to or, like, all things. I mean, that's the only thing sort of task that you can automate with agents. So, yeah, this is phase two where. Well, let's. Let's like that email one. Right. So, like, how would you see someone using atlas? To write an email. Just like here on the top side. So the bionic. How you want to build this? Like, I think the MVP can just be like, this is just runs locally. We can just type. Define like MCP for this. So we don't have like, remake claw or whatever on your cloud. It just tells you okay. Like, yeah. Every morning. Or you have an MCB server that does all this querying for you, and in Claude you just get that output and you can copy paste that. Onto your emails. Nice, okay? So you basically build like a. Whatever, the sort of data layer or context layer that we define as. As you build an MSP for that. Have people basically type in ChatGPT, like, hey, I'm about to write this email. Like, yeah, what do you have? Like, give me my to dos for today. I just want to do it for you and I'll give you all the things. That's like. I think that's possible. The phase three is, like, okay, in phase two, Lake instead, helping you build. I feel like this could be an ambitious thing. By, like, how, like, agents are working, like, across each other. So, like, I was. I'm, like, curious how, like, cross collaboration works. Across. Like there's a different orgs. So let's say like you have like a PM Org where you can define all these different. Like these MCPs where you get progress and just like. Yeah. Goes through like what. Like how you did to find progress and it gives you like a little progress. Or, like, if you're for the. For the PM area. You want to, like, report a bug, so somehow it does that for you. I feel like each of these, we can have all these different MCPs to find, and then. Like, a really awesome way would be like, oh, an alien. This is just doing it for you. I feel like this is, like, we have tested a lot. I feel like definitely I would not recommend this for the engineering skills immediately, but I feel like doing this in the ops space. Where the cost is lower. I would say the cost is low, but I feel like the end output is if it's like an email or if it's like a list of tasks that you have to do and you have to collect information from, I think that's definitely doable. Yeah, yeah, I think. You know, certainly with ops, it's like similar problem, right? Which is that the agent is probably going to get at least a day, like 80% of the way there unless you like really refine it. But you're right that, like, if you make a bad doc or something, no big deal. Yeah, it depends. Customer communication now could be scary, so you probably want to limit there. Yeah, but anything internal. That's, like, process wise. Yeah, that's risky. Very cool. So. And just move it. So step one, right? Just click all the info. Step two step to build out agents. To, you know, use that info and make it accessible potential with mtpa. And then the keys mistake. Do it like across multiple. Yeah. Yeah. Is it like the gold strike? But it's going to be really cool. But I don't think it's like really easy possible. I think we can. I. I think I end would be that okay. Like, give me this entire feature end to end in production by just like a prompt. And that's something that, like, could be crazy to even invest ors. I feel like it's possible to be like, if you get like, I will look at this, like, interview for election. And they're like, 30, 30% of all that code is now driven by, like, agents. Or like not Asians but like chatgpt. So I feel like, yeah, it could be like a cool take thing. Just drive for. Yeah, I think so. First of all, like, as a North Star vision, that's something we talk about is like on the There's a lot of things that Atlas can in theory do. Right. But specific to, like, product and eng that in a future world. Whether it's, you know, six months from now or six years from, I'm not sure. But in the future world, we sit around, we talk. We talk about what a future should do, what the pros and cons are, et cetera. And we kind of hash this out as humans. All that's recorded, right? And in AI is able to take that and the decisions we've kind of come to and then, like you said, and then go through all these steps. To finish, you know, product, right? So totally, totally, totally by the vision there. Let me ask if you were gonna work to, like, think about Atlas. I see it as, like, two different. Like, you kind of lay that base, which is, like, the end of this. Stuff is like the super amazing world, right? And then all the stuff in the beginning is, like, painful. You know, just digging through data and, like, talking to the team and trying to understand what the problems are. Building. Retools. Fixing retools. Right. Like a bunch of crap. So I'm just curious, as you think about, like, what you want to be doing over the next couple years. Does that match sort of the vision of, like. Because I just say that I hope that we will soon get to build all the really cool stuff. I think the first few months, at least here, are probably less of that. You know, I think this is just like. I feel like this is like. I'm confident that this is how, like, the next generation of companies would be running. So this is, like, you have to run a company in this way. This is like, it's. It's good that, like, used to. We were still so new. So we gain. Like these changes won't be that hard to make. But I feel like that's just like. Yeah, that's just, like, required. Like, it's required homework that you have to do to build something cooler in the end. And I feel like this is. This is, like, also interesting. I feel like I almost envision this. Or like maybe Busel or some other computers. This, but like a standalone product that lets a non AI company become an AI agent company. And gleam is solving search for it. But like Pilot does this in some ways where we help like non tech companies become tech companies. Like, we build this for data model so that they can automate stuff, but the next step is like, how do you make a Tech Co. An AI tech company? And that's, like, required. And this is like the. I think we learned so much as we're doing this. So yeah. It's gonna. I feel like it's. It's like. Yeah. I think I'm, like, expecting that to be, like, the more important, but it's gonna be, like, to win somebody. A hundred percent. Well, cool. Well, I. I'll check with the team. I think that might be. I think that might be it. For now. So, yeah, before we kind of just wrap up, I guess, you know, any questions that can't answer you. What's your vision? Like, you join the team as a pm like, what do you think is gonna be like, yeah, yeah. So I. It's funny. Like, a lot of it's not funny, but, like, it's interesting. A lot of things you shared align pretty closely of the way that there's nothing about it right now. And, like, I'm still, again, being weak too, like, in the, like, soaking up context phase. So anything I say here is, like, very weekly held. But, yeah, full. Like, if I were to think about, like, the full vision here. It's that AI is basically going to like if you believe that I will continue to get smarter. And cheaper. Then it is a pretty natural next leap to say that when you have intelligence that is that cheap and that smart, it's gonna change the way that you can design a company to operate. Right. Like, we're already sort of seeing it, but, like, you know, if you project out even just a little bit, You know, that lets you design something from scratch. You don't necessarily need all of these hierarchies of structure. You don't necessarily need managers. You don't need certain types of managers, you know, necessarily need all these ways in which, like humans need to communicate decisions. And so the like end vision, for me, at least with Atlas, is to say what is like a truly AI native company. How do we enable that? And essentially, how do we provide a super intelligent AI with everything that it would need to actually make the right decision? It's all based on this idea that these LMS are super smart, but they will still not get the right answer if you do go and give them the right context. And all of the contacts that we have in this company. Like if you take everything that is known here. You know, I don't know what percentage it is, but, like, it is not. It's less than 100%. That is, like, in even just, like, all of the digital information that we have. And less than that is in, like, a place that is even queryable and accessible to, you know, period. And so to me, I see this as, like, the core challenge is, okay, how do we get the contacts that is largely in people's heads. Partially in systems and things. And make that accessible to, like, these AI systems. So maybe that's, like, part one. Part two is like, okay, now that that's there and accessible, kind of like what you laid on phase one, it's like, okay, how do we build automations and agents eventually on top of that, they can like do a lot of the work that we don't necessarily want to do. And then step three. Is you still have humans in loop here. Like, no matter what, we're not gonna automate everyone away. So it's still human. So how do we make it not only accessible and valuable for the agents, but accessible and valuable for the people that are doing the work alongside these agents? So that's like the, the. The big vision. And then I'll just say, like, quickly, short, you know, short term. Right. Some of the things that we're working on right now. Is we have a code base that is Atlas. It is our sort of, like, you mention that context, like shared layer. That's currently what we have today. And so we're working on, like, cleaning that up and organizing it. We're working on. Just, like, trying to get information out of other systems. So, like, we use Granola to record meetings? I don't know if you've used it before. Yeah, so it's really great. But we use that to record meetings. How do we get those granolas into our system so we can automate? You know, steps on that. And then, like, how do we choose? There's, like, infinite things that we could potentially do with Atlas, right? So, like, how do we choose what to tackle first? And so my job in the next couple weeks is trying to map out all the workflows that the team has, trying to understand what they're doing so that we can then go, okay, these are the ones that we want to automate first, you know, so, anyway, there's a lot there, but hopefully that gives a little picture. Yeah, I think, like. How sort of closely do you work with, like, the modeling team or, like, the AI Team and stuff? As of today. And again, like right now, not that closely. Because the work hasn't yet evolved to the building of agents piece. So it's just, like right now, it's really much more about how do we get all of our data, how do we. How do we, like, organize and architect our data in a way that's, like, scalable? How do we get all of that data into a place that we can work with it, and how do we map the workflows that the team will actually need? But eventually, like, the next phase after we do that, is to actually build these agents and then make them, you know, valuable and useful. We want to be leveraging all of the benefits that the entire basis team has gotten. So at that point, I expect I'll be working a bit closer and say, okay, like, let's take the VAL system that we're using. Let's. Let's use that on our agents. Let's understand. The framework that you guys are using, let's use that. So as of today, not that much, but hopefully soon. More. That makes sense. Yeah, I think those are always the only actual explosive questions. But yeah, in general. Do you feel like? Access is still like an experiment that you're doing, right? Like how do you make sure that you liked any versus the right path? Like how you like? Are you over indexing on your early feedback or you just like also just taking a bed? Yeah. Yeah. So great question. It is very much. I would say that the right. Well, partially the right lens, which, like, it is very much an experiment at the time that, like, no company has really done this before. This is all new, and so, like, we'll need to basically, like, go ahead and invent this. But at the same time, like, it does need to provide value. So, like, the way that we're trying to stay on track here is Mitch. I don't know if you met Mitch before again. He is like the. Like, ultimate architect of all this. Like, this is all his brainchild. And so, like, we will basically be like, he's gonna. If this is invaluable, right? He's the founder. He'll make sure that. Like this. But for now, at least, it's like, can we provide tangible value with just. Internal. Internal operations. So we don't have, like, a North Star metric as an example. One day. It might be nice to get to that. But, like, for now, it's okay. Like, is there. Are we just building, like, a cool data system? Like, that's not doing anything? Is the team actually able to be more productive? In some meaningful way. You know, fewer meetings, you know, documents created automatically. So, anyway, I'll say that, like, we don't yet have. This is like the North Star metric, but intangibly just. Or we make the team actually more productive. Sweet. And happy to answer, brother, if you're in anything that's like non adolescel led answer if that's. But also no pressure. The next steps and stuff. I mean, the interview process and stuff, you know, anything like that. That? I'm not sure. I think Ben will follow up. You've been touched with cool, so I think he'll follow up with next steps there. But yeah, other than that, I think good to go. Thanks for this lead for an interview, but yeah, thanks for coming in.